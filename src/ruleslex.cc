#line 2 "ruleslex.cc"

#line 4 "ruleslex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer rules_create_buffer
#define yy_delete_buffer rules_delete_buffer
#define yy_flex_debug rules_flex_debug
#define yy_init_buffer rules_init_buffer
#define yy_flush_buffer rules_flush_buffer
#define yy_load_buffer_state rules_load_buffer_state
#define yy_switch_to_buffer rules_switch_to_buffer
#define yyin rulesin
#define yyleng rulesleng
#define yylex ruleslex
#define yylineno ruleslineno
#define yyout rulesout
#define yyrestart rulesrestart
#define yytext rulestext
#define yywrap ruleswrap
#define yyalloc rulesalloc
#define yyrealloc rulesrealloc
#define yyfree rulesfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE rulesrestart(rulesin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t rulesleng;

extern FILE *rulesin, *rulesout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE ruleslex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-ruleslineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < rulesleng; ++yyl )\
                    if ( rulestext[yyl] == '\n' )\
                        --ruleslineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up rulestext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up rulestext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via rulesrestart()), so that the user can continue scanning by
	 * just pointing rulesin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when rulestext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t rulesleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow ruleswrap()'s to do buffer switches
 * instead of setting up a fresh rulesin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void rulesrestart (FILE *input_file  );
void rules_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE rules_create_buffer (FILE *file,int size  );
void rules_delete_buffer (YY_BUFFER_STATE b  );
void rules_flush_buffer (YY_BUFFER_STATE b  );
void rulespush_buffer_state (YY_BUFFER_STATE new_buffer  );
void rulespop_buffer_state (void );

static void rulesensure_buffer_stack (void );
static void rules_load_buffer_state (void );
static void rules_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER rules_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE rules_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE rules_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE rules_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *rulesalloc (yy_size_t  );
void *rulesrealloc (void *,yy_size_t  );
void rulesfree (void *  );

#define yy_new_buffer rules_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        rulesensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            rules_create_buffer(rulesin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        rulesensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            rules_create_buffer(rulesin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define ruleswrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *rulesin = (FILE *) 0, *rulesout = (FILE *) 0;

typedef int yy_state_type;

extern int ruleslineno;

int ruleslineno = 1;

extern char *rulestext;
#define yytext_ptr rulestext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up rulestext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	rulesleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 81
#define YY_END_OF_BUFFER 82
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[583] =
    {   0,
        9,    9,   82,   80,   81,   78,   80,   81,   79,   81,
       59,   80,   81,   80,   81,   31,   62,   80,   81,   80,
       81,   65,   80,   81,   80,   81,   21,   80,   81,   22,
       80,   81,   39,   80,   81,   37,   63,   80,   81,   61,
       80,   81,   38,   64,   80,   81,   28,   80,   81,   40,
       80,   81,   75,   76,   80,   81,   75,   76,   80,   81,
       30,   80,   81,   27,   80,   81,   17,   80,   81,   35,
       80,   81,   18,   80,   81,   80,   81,   72,   80,   81,
       72,   80,   81,   72,   80,   81,   72,   80,   81,   72,
       80,   81,   32,   72,   80,   81,   23,   80,   81,   24,

       80,   81,   74,   80,   81,   72,   80,   81,   72,   80,
       81,   72,   80,   81,   72,   80,   81,   72,   80,   81,
       72,   80,   81,   72,   80,   81,   72,   80,   81,   32,
       72,   80,   81,   72,   80,   81,   25,   80,   81,   54,
       80,   81,   26,   80,   81,   80,   81,   80,   81,   80,
       81,   80,   81,   80,   81,   78,   80,   81,   59,   80,
       81,   80,   81,   31,   62,   80,   81,   80,   81,   65,
       80,   81,   80,   81,   21,   80,   81,   22,   80,   81,
       39,   80,   81,   37,   63,   80,   81,   61,   80,   81,
       38,   64,   80,   81,   28,   80,   81,   40,   80,   81,

       75,   76,   80,   81,   75,   76,   80,   81,   30,   80,
       81,   27,   80,   81,   17,   80,   81,   35,   80,   81,
       18,   80,   81,   80,   81,   72,   80,   81,   72,   80,
       81,   72,   80,   81,   72,   80,   81,   72,   80,   81,
       32,   72,   80,   81,   23,   80,   81,   24,   80,   81,
       74,   80,   81,   72,   80,   81,   72,   80,   81,   72,
       80,   81,   72,   80,   81,   72,   80,   81,   72,   80,
       81,   72,   80,   81,   72,   80,   81,   32,   72,   80,
       81,   72,   80,   81,   25,   80,   81,   54,   80,   81,
       26,   80,   81,   80,   81,   80,   81,   80,   81,   80,

       81,   10,   81,    9,   81,   11,   81,    7,   81,    5,
       81,    7,   81,    7,   81,   78,   36,   77,   73,   73,
       56,   76,   76,   12,    3,   75,   76,   29,   33,   19,
       34,   57,   20,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   44,   72,   72,   72,   72,
       72,   72,   55,   59,   72,   72,    1,   78,   36,   77,
       73,   73,   56,   76,   76,   12,    3,   75,   76,   29,
       33,   19,   34,   57,   20,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   44,   72,   72,
       72,   72,   72,   72,   55,   59,   72,   72,   10,    9,

        6,    4,   77,   73,   73,   73,   73,   76,    2,   76,
       76,   76,   76,   58,   72,   69,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   13,
       15,   14,   16,   60,   32,   19,   77,   73,   73,   73,
       73,   76,    1,    2,   76,   76,   76,   76,   58,   72,
       69,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   13,   15,   14,   16,   60,   32,
       19,   76,   76,   67,   72,   66,   72,   68,   72,   72,
       72,   72,   72,   45,   72,   72,   51,   72,   72,   49,
       72,   52,   72,   76,   76,   67,   72,   66,   72,   68,

       72,   72,   72,   72,   72,   45,   72,   72,   51,   72,
       72,   49,   72,   52,   72,   72,   72,   72,   72,   47,
       72,   72,   72,   72,   72,   72,   47,   72,   72,   41,
       72,   72,   46,   72,   72,   72,   72,   41,   72,   72,
       46,   72,   72,   72,   72,   72,   72,   72,   48,   72,
       50,   72,   72,   72,   72,   48,   72,   50,   72,   42,
       43,   71,   72,   70,   72,   72,    8,   42,   43,   71,
       72,   70,   72,   72,   72,   72,   72,   72,   53,   72,
       53,   72
    } ;

static yyconst flex_int16_t yy_accept[435] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    4,    6,    9,
       11,   14,   16,   20,   22,   25,   27,   30,   33,   36,
       40,   43,   47,   50,   53,   57,   61,   64,   67,   70,
       73,   76,   78,   81,   84,   87,   90,   93,   97,  100,
      103,  106,  109,  112,  115,  118,  121,  124,  127,  130,
      134,  137,  140,  143,  146,  148,  150,  152,  154,  156,
      159,  162,  164,  168,  170,  173,  175,  178,  181,  184,
      188,  191,  195,  198,  201,  205,  209,  212,  215,  218,
      221,  224,  226,  229,  232,  235,  238,  241,  245,  248,
      251,  254,  257,  260,  263,  266,  269,  272,  275,  278,

      282,  285,  288,  291,  294,  296,  298,  300,  302,  304,
      306,  308,  310,  312,  314,  316,  317,  318,  318,  319,
      319,  320,  320,  321,  321,  321,  322,  323,  324,  325,
      326,  326,  326,  326,  328,  329,  330,  331,  332,  333,
      334,  334,  334,  334,  335,  336,  336,  336,  337,  338,
      339,  340,  341,  342,  343,  343,  343,  344,  345,  346,
      348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
      357,  357,  357,  357,  357,  357,  358,  359,  360,  360,
      361,  361,  361,  362,  362,  363,  363,  363,  364,  365,
      366,  367,  368,  368,  368,  368,  370,  371,  372,  373,

      374,  375,  376,  376,  376,  376,  377,  378,  378,  378,
      379,  380,  381,  382,  383,  384,  385,  385,  385,  386,
      387,  388,  390,  391,  392,  393,  394,  395,  396,  397,
      398,  399,  399,  399,  399,  399,  399,  400,  401,  402,
      403,  404,  405,  406,  406,  406,  407,  408,  408,  408,
      409,  409,  410,  411,  412,  412,  413,  414,  415,  415,
      415,  415,  416,  418,  419,  420,  421,  422,  423,  424,
      425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
      435,  436,  437,  438,  438,  439,  440,  440,  440,  441,
      442,  442,  442,  443,  443,  445,  446,  447,  447,  448,

      449,  450,  450,  450,  450,  451,  453,  454,  455,  456,
      457,  458,  459,  460,  461,  462,  463,  464,  465,  466,
      467,  468,  469,  470,  471,  472,  473,  474,  474,  474,
      474,  476,  478,  480,  481,  482,  483,  484,  486,  487,
      489,  490,  492,  494,  494,  495,  496,  496,  496,  496,
      498,  500,  502,  503,  504,  505,  506,  508,  509,  511,
      512,  514,  516,  516,  516,  516,  517,  518,  519,  520,
      522,  523,  523,  523,  523,  523,  524,  525,  526,  527,
      529,  530,  530,  531,  531,  532,  533,  535,  536,  537,
      538,  538,  538,  539,  539,  540,  541,  543,  544,  545,

      546,  546,  546,  547,  548,  549,  551,  553,  553,  553,
      553,  554,  555,  556,  558,  560,  561,  562,  564,  566,
      567,  568,  569,  570,  572,  574,  575,  576,  577,  578,
      579,  581,  583,  583
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,    1,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,    1,   26,   27,   27,   27,   28,   29,   30,
       27,   27,   31,   27,   27,   32,   33,   34,   35,   36,
       27,   37,   27,   38,   39,   27,   27,   27,   27,   27,
       40,   41,   42,    1,   43,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   53,   53,   54,   55,   56,
       57,   58,   53,   59,   60,   61,   62,   63,   64,   65,
       53,   53,   66,   67,   68,    1,    1,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
       82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
        1,   92,   93,   94,   95,   96,   97,    1,   98,   99,
      100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
      110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
      120,  121,    1,  122,  123,  124,  125,  126,  127,    1,
      128,    1,    1,  129,  130,    1,  131,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,  132,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[133] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[448] =
    {   0,
        0,  132,  263,  265,  266,  267, 1182, 3349,  269, 3349,
     1106,  266, 3349,  281, 3349, 1109, 3349, 3349, 3349,  255,
     3349,  257, 3349,  265,  273,  274, 1097, 3349,  263,  264,
     1093,  245,  394, 1081, 1084, 1077, 1076,    0, 3349, 3349,
      507, 1051,    0, 1054, 1056, 1060, 1049,  248, 1050,    0,
     1054, 3349, 1038, 3349,  993,  570,  981,  272, 1099,  302,
      349,  350,  320,  696, 1098,  351, 1097, 1096, 1095,  355,
     1094,  357, 1093,  352,  354,  361,  363, 1092,  364,  376,
      365,  356,  809, 1059, 1062, 1055, 1054,    0, 1087, 1086,
      922, 1027,    0, 1030, 1032, 1036, 1025,  348, 1026,    0,

     1030, 1078,  295, 1077,  360, 1051,  297,  390,    0, 1077,
     3349, 3349, 3349, 1060, 1064,  393, 3349,  363, 3349,  379,
     1161, 1274,    0, 1337,  954, 3349,  369,  443, 3349, 3349,
     1072,  396,  459,  457, 3349, 3349, 1049, 3349, 3349, 3349,
     1014, 1016, 1023,    0,    0, 1397,  948, 1032, 1036, 1038,
     1027, 1507,    0,  373, 1570,  943, 1003, 1008, 1002,    0,
     1009, 1004,  996,  999,  996, 3349, 3349,    0,    0,  348,
      394,  387,  385,  985, 1052, 3349,  495, 1048,  489, 1047,
      506,  458, 1680, 1793,    0, 1922,  391, 1046,  500,  570,
     1045, 1044, 1043,  482,  572,  576, 1042, 1041,  497, 1040,

     1039, 1038,  515,  467,  484,    0,    0, 1982,  487, 1003,
     1007, 1009,  998, 2092,    0,  474, 2155,  504,  975,  980,
      974,    0,  981,  976,  968,  971,  968, 1025, 1024,    0,
        0,  516,  525,  697,  517,  505,    0, 1024, 3349, 3349,
      543, 2265,    0, 2328,  903, 2438,    0, 2501,  902,  581,
     1020, 3349,  370,  588,  491, 3349,  496, 3349,  978,  963,
      955, 2611,  986,  549,  552, 2724,  987,  582,  488,  586,
      550,  547,  668,  564,  598, 3349, 3349, 3349, 3349, 3349,
     3349, 3349,  759,  717, 2837,    0, 2900,  699, 3010,    0,
     3073,  700,  761, 1014, 3349,  763,  764,  702, 1013,  766,

     1012,  733,  575,  703,  981,    0,  985,  983, 3183,  980,
      962,  964,  960,  951,  959,  957,  943,  952,  999,  998,
      997,  996,  995,  994,  993,  689,  603,  940,  932,  941,
      959,  958,  957,  596,  601,  678,  737,  956,  738,  955,
      739,  931,  930,  770,  872,  776,  779,  714,  798,    0,
        0,    0,  681,  673,  888,  894,    0,  884,    0,  885,
        0,    0,  883,  876,  890,  776,  779,  754,  758,  764,
      742,  814,  822,  817,  785,  801,  804,  874,  878,  878,
      870,  885, 3349,  871,  850,  851,  894,  846,  847,  850,
      848,  881,  923,  886,  854,  856,    0,  880,  867,  874,

      862,  863,  857,  865,  853,  884,  882,  899,  846,  906,
      873,  875,  852,    0,    0, 3349, 3349,  881,  880,  761,
      820,  816,  813,  688,  684,  662,  874,  653,  877,  475,
      374,    0, 3349, 3314, 3317, 3320, 3322, 3325,  300, 3328,
     3331, 3334,  280, 3337, 3339, 3342, 3345
    } ;

static yyconst flex_int16_t yy_def[448] =
    {   0,
      433,  433,  434,  434,  435,  435,  433,  433,  433,  433,
      433,  436,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,   33,   33,   33,   33,   33,  433,  433,
      433,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,  433,  433,  433,  433,  433,  433,  433,  437,  437,
      437,  438,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,   64,   83,   83,   83,   83,   83,  437,  437,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,  437,  437,  437,  437,  437,  437,  437,  439,  433,
      433,  433,  433,  433,  433,  433,  433,  436,  433,  436,
      433,  433,  121,  433,  433,  433,  433,  433,  433,  433,
      440,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,   33,   33,  433,  433,   33,   33,   33,
       33,  433,  152,  152,  433,  433,   33,   33,   33,   33,
       33,   33,   33,   33,   33,  433,  433,   33,   33,  433,
      433,  433,  433,  433,  437,  433,  437,  437,  441,  437,
      441,  437,   83,   83,  183,  437,  437,  437,  437,  437,
      437,  437,  442,  437,  437,  437,  437,  437,  437,  437,

      437,  437,  437,  437,  437,   83,   83,  186,  437,   83,
       83,   83,   83,   83,  214,  214,  186,  437,   83,   83,
       83,   83,   83,   83,   83,   83,   83,  437,  437,   83,
       83,  437,  437,  437,  437,  437,  443,  433,  433,  433,
      444,  433,  242,  433,  433,  433,  246,  433,  433,  433,
      445,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  262,  262,  262,  433,  266,  262,  262,  262,
      262,  262,  262,  262,  262,  433,  433,  433,  433,  433,
      433,  433,  446,  437,   83,  285,  186,  437,  285,  289,
      186,  437,  437,  447,  433,  437,  437,  437,  437,  437,

      437,  437,  437,  437,   83,   83,   83,   83,   83,  309,
       83,   83,   83,   83,   83,   83,   83,   83,  437,  437,
      437,  437,  437,  437,  437,  433,  433,  433,  433,  433,
      262,  262,  262,  266,  266,  262,  262,  262,  262,  262,
      262,  262,  262,  437,  437,  437,  437,  437,  437,   83,
       83,   83,  309,  309,   83,   83,   83,   83,   83,   83,
       83,   83,  433,  433,  433,  266,  266,  262,  262,  262,
      262,  437,  437,  437,  437,  309,  309,   83,   83,   83,
       83,  433,  433,  433,  266,  266,  262,  262,  262,  262,
      437,  437,  437,  437,  309,  309,   83,   83,   83,   83,

      433,  433,  266,  266,  262,  262,  262,  437,  437,  437,
      309,  309,   83,   83,   83,  433,  433,  266,  266,  262,
      437,  437,  437,  309,  309,   83,  262,   83,  262,   83,
      262,   83,    0,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433
    } ;

static yyconst flex_int16_t yy_nxt[3482] =
    {   0,
        8,    9,   10,    9,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   33,   33,   34,
       33,   33,   33,   35,   33,   36,   33,   37,   38,   39,
        8,   40,   41,   42,   43,   44,   43,   45,   43,   43,
       43,   46,   43,   43,   43,   43,   43,   47,   48,   49,
       43,   50,   43,   51,   43,   52,   53,   54,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,   55,   56,
       57,   58,   59,   60,   10,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   83,
       83,   84,   83,   83,   83,   85,   83,   86,   83,   87,
       88,   89,   59,   90,   91,   92,   93,   94,   93,   95,
       93,   93,   93,   96,   93,   93,   93,   93,   93,   97,
       98,   99,   93,  100,   93,  101,   93,  102,  103,  104,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
      105,  106,  107,  108,  110,  111,  110,  111,  113,  113,
      116,  119,  116,  127,  128,  127,  128,  130,  114,  114,
      237,  129,  131,  115,  115,  136,  137,  138,  139,  132,
      132,  162,  134,  134,  141,  163,  142,  176,  143,  176,

      237,  133,  133,  177,  176,  177,  120,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      133,  133,  176,  122,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  170,  171,  172,  173,
      174,  176,  176,  176,  176,  180,  176,  176,  176,  176,
      188,  228,  176,  176,  192,  176,  176,  176,  119,  193,
      194,  182,  178,  189,  190,  189,  190,  194,  176,  196,
      196,  191,  195,  197,  241,  132,  198,  199,  202,  195,
      181,  224,  176,  176,  116,  225,  116,  133,  133,  200,

      201,  195,  266,  120,  267,  203,  145,  204,  195,  205,
      124,  125,  144,  144,  253,  254,  133,  133,  230,  120,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  276,  129,  277,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  132,
      176,  250,  250,  280,  232,  233,  234,  235,  236,  176,
      229,  133,  255,  132,  255,  134,  134,  256,  257,  278,
      139,  279,  258,  117,  176,  133,  176,  282,  140,  176,
      133,  176,  126,  166,  180,  281,  177,  176,  177,  176,

      296,  297,  176,  309,  133,  310,  176,  176,  176,  256,
      257,  283,  183,  284,  327,  327,  194,  176,  176,  176,
      145,  301,  303,  146,  147,  152,  152,  176,  195,  181,
      432,  304,  337,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  181,  195,  119,  154,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  176,  302,  176,  198,  332,  176,  176,  145,
      333,  145,  145,  120,  145,  298,  194,  298,  293,  293,
      299,  300,  194,  340,  196,  196,  145,  132,  195,  250,

      250,  319,  191,  320,  195,  339,  326,  326,  207,  133,
      321,  201,  322,  301,  145,  178,  133,  195,  145,  325,
      202,  327,  327,  195,  342,  215,  153,  366,  133,  336,
      145,  153,  348,  338,  367,  133,  155,  156,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  343,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  176,  176,

      145,  176,  176,  215,  176,  176,  377,  326,  326,  430,
      145,  215,  376,  428,  215,  341,  176,  133,  215,  176,
      299,  300,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  176,  133,  368,  184,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  176,  344,  176,  180,  176,  176,  349,  176,  145,
      145,  145,  176,  323,  145,  374,  347,  194,  176,  293,
      293,  176,  345,  345,  346,  346,  145,  176,  369,  195,
      145,  195,  195,  145,  346,  346,  145,  371,  370,  181,

      176,  390,  188,  228,  385,  324,  153,  386,  195,  153,
      195,  195,  427,  388,  387,  176,  176,  389,  176,  176,
      286,  290,  176,  372,  176,  186,  187,  206,  206,  395,
      394,  215,  396,  373,  215,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  176,  375,
      176,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  176,  391,  392,  393,  145,  145,
      153,  153,  145,  176,  215,  145,  215,  153,  176,  405,
      345,  345,  403,  404,  408,  153,  411,  407,  412,  418,

      195,  176,  406,  215,  422,  215,  145,  419,  176,  145,
      153,  153,  426,  420,  145,  424,  145,  425,  417,  195,
      416,  415,  414,  413,  409,  176,  145,  402,  401,  400,
      429,  399,  431,  398,  397,  384,  383,  382,  208,  209,
      214,  214,  410,  381,  380,  379,  421,  378,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  423,  145,  145,  216,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  145,  145,  145,
      145,  145,  365,  364,  363,  176,  176,  176,  176,  176,

      176,  176,  362,  361,  360,  359,  358,  357,  356,  355,
      354,  352,  351,  350,  176,  176,  295,  335,  145,  330,
      329,  328,  252,  247,  243,  238,  176,  176,  318,  317,
      316,  315,  314,  313,  312,  311,  308,  307,  306,  305,
      176,  176,  176,  176,  176,  295,  176,  176,  176,  176,
      176,  217,  218,  176,  176,  136,  275,  274,  273,  272,
      271,  270,  269,  268,  153,  265,  264,  263,  262,  145,
      261,  260,  259,  258,  252,  121,  240,  239,  238,  176,
      176,  227,  226,  223,  222,  221,  220,  219,  176,  176,
      213,  212,  211,  210,  176,  176,  176,  176,  176,  176,

      176,  176,  168,  167,  166,  165,  164,  161,  160,  159,
      158,  157,  151,  150,  149,  148,  140,  135,  126,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  117,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  242,
      242,  433,  433,  433,  433,  433,  433,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,

      433,  433,  433,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      244,  245,  246,  246,  433,  433,  433,  433,  433,  433,

      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  433,  433,  433,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,

      433,  433,  433,  248,  249,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  433,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  433,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  144,  144,  144,  144,  144,

      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  152,  152,  433,  433,  433,
      433,  433,  433,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  433,  433,  433,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  155,  156,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  433,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  285,  285,

      433,  433,  433,  433,  433,  433,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  433,
      433,  433,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  433,  433,  287,
      288,  289,  289,  433,  433,  433,  433,  433,  433,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  433,  433,  433,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  291,  292,  176,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,

      433,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      433,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      214,  214,  433,  433,  433,  433,  433,  433,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  433,  433,  433,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  217,  218,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  433,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  242,  242,  433,  433,  433,  433,  433,
      433,  243,  243,  243,  243,  243,  243,  243,  243,  243,

      243,  243,  243,  243,  433,  433,  433,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  244,  245,  243,  243,  243,  243,

      243,  243,  243,  243,  243,  243,  433,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  246,  246,  433,  433,
      433,  433,  433,  433,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  433,  433,  433,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,

      246,  246,  246,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  248,  249,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  433,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  246,

      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  144,
      144,  433,  433,  433,  433,  433,  433,  145,  145,  145,
      145,  145,  145,  331,  145,  145,  145,  145,  145,  145,
      433,  433,  433,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      146,  147,  152,  152,  433,  433,  433,  433,  433,  433,
      153,  153,  153,  153,  334,  153,  153,  153,  153,  153,
      153,  153,  153,  433,  433,  433,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  155,  156,  285,  285,  433,  433,  433,
      433,  433,  433,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  433,  433,  433,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,

      285,  285,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  287,  288,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  433,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  285,  285,

      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  289,  289,
      433,  433,  433,  433,  433,  433,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  433,
      433,  433,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  291,
      292,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  433,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,

      289,  214,  214,  433,  433,  433,  433,  433,  433,  215,
      215,  215,  215,  353,  215,  215,  215,  215,  215,  215,
      215,  215,  433,  433,  433,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  217,  218,  109,  109,  109,  112,  112,  112,
      118,  118,  175,  175,  175,  179,  179,  179,  251,  251,
      251,  179,  179,  179,  294,  294,  294,  118,  118,  251,
      251,  251,  179,  179,  179,  294,  294,  294,    7,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433
    } ;

static yyconst flex_int16_t yy_chk[3482] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    3,    3,    4,    4,    5,    6,
        9,   12,    9,   20,   20,   22,   22,   24,    5,    6,
      443,   22,   24,    5,    6,   29,   29,   30,   30,   25,
       26,   48,   26,   26,   32,   48,   32,  103,   32,  107,

      439,   25,   26,   60,   60,   60,   12,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       25,   26,   63,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   58,   58,   58,   58,
       58,   61,   62,   66,   74,   62,   75,   70,   82,   72,
       66,  103,  105,   76,   74,   77,   79,   81,  118,   74,
       75,   63,   61,   70,   70,   72,   72,   76,   80,   76,
       76,   72,   75,   77,  120,  127,   79,   79,   81,   76,
       62,   98,  108,  187,  116,   98,  116,  127,  253,   80,

       80,   75,  154,  118,  154,   82,  431,   82,   76,   82,
       14,   14,   33,   33,  132,  132,  127,  253,  107,  120,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,  170,  170,  170,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,  128,
      182,  128,  128,  172,  108,  108,  108,  108,  108,  204,
      105,  128,  133,  134,  133,  134,  134,  133,  133,  171,
      171,  171,  171,  173,  194,  134,  205,  173,  173,  209,
      128,  179,  172,  172,  179,  172,  177,  177,  177,  199,

      194,  194,  189,  216,  134,  216,  218,  236,  181,  255,
      255,  181,  187,  182,  257,  257,  189,  203,  232,  235,
      269,  199,  204,   33,   33,   41,   41,  233,  189,  179,
      430,  205,  269,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,  181,  189,  241,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,  190,  203,  195,  236,  264,  303,  196,  272,
      265,  264,  271,  241,  265,  195,  190,  195,  190,  190,
      195,  195,  196,  272,  196,  196,  274,  250,  190,  250,

      250,  232,  232,  232,  196,  271,  254,  254,  209,  250,
      233,  233,  233,  233,  268,  235,  254,  190,  270,  235,
      235,  327,  327,  196,  274,  218,  334,  334,  250,  268,
      275,  335,  303,  270,  335,  254,   41,   41,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,  275,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   64,  234,

      273,  288,  292,  354,  298,  304,  354,  326,  326,  428,
      336,  353,  353,  426,  425,  273,  348,  326,  424,  284,
      298,  298,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,  302,  326,  336,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  283,  284,  293,  283,  296,  297,  304,  300,  337,
      339,  341,  344,  234,  371,  348,  302,  293,  346,  293,
      293,  347,  297,  297,  300,  300,  368,  375,  337,  293,
      369,  296,  297,  420,  346,  346,  370,  341,  339,  283,

      349,  371,  234,  234,  366,  234,  366,  367,  293,  367,
      296,  297,  420,  369,  368,  423,  372,  370,  422,  374,
      288,  292,  421,  344,  373,   64,   64,   83,   83,  376,
      375,  376,  377,  347,  377,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,  409,  349,
      391,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,  345,  372,  373,  374,  388,  389,
      385,  386,  390,  392,  395,  405,  396,  403,  394,  388,
      345,  345,  385,  386,  391,  404,  395,  390,  396,  403,

      345,  408,  389,  411,  409,  412,  427,  404,  410,  429,
      419,  418,  413,  405,  407,  411,  406,  412,  402,  345,
      401,  400,  399,  398,  392,  393,  387,  384,  382,  381,
      427,  380,  429,  379,  378,  365,  364,  363,   83,   83,
       91,   91,  394,  360,  358,  356,  408,  355,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,  410,  343,  342,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,  340,  338,  333,
      332,  331,  330,  329,  328,  325,  324,  323,  322,  321,

      320,  319,  318,  317,  316,  315,  314,  313,  312,  311,
      310,  308,  307,  305,  301,  299,  294,  267,  263,  261,
      260,  259,  251,  249,  245,  238,  229,  228,  227,  226,
      225,  224,  223,  221,  220,  219,  213,  212,  211,  210,
      202,  201,  200,  198,  197,  193,  192,  191,  188,  180,
      178,   91,   91,  106,  175,  174,  165,  164,  163,  162,
      161,  159,  158,  157,  156,  151,  150,  149,  148,  147,
      143,  142,  141,  137,  131,  125,  115,  114,  110,  104,
      102,  101,   99,   97,   96,   95,   94,   92,   90,   89,
       87,   86,   85,   84,   78,   73,   71,   69,   68,   67,

       65,   59,   57,   55,   53,   51,   49,   47,   46,   45,
       44,   42,   37,   36,   35,   34,   31,   27,   16,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,   11,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  121,
      121,    7,    0,    0,    0,    0,    0,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,

        0,    0,    0,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      121,  121,  122,  122,    0,    0,    0,    0,    0,    0,

      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,    0,    0,    0,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  122,  122,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,    0,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,    0,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,

      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  152,  152,    0,    0,    0,
        0,    0,    0,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,    0,    0,    0,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  152,  152,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,    0,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  183,  183,

        0,    0,    0,    0,    0,    0,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,    0,
        0,    0,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  183,
      183,  184,  184,    0,    0,    0,    0,    0,    0,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,    0,    0,    0,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  184,  184,  186,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,

        0,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
        0,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      214,  214,    0,    0,    0,    0,    0,    0,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,    0,    0,    0,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  214,  214,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,    0,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  242,  242,    0,    0,    0,    0,    0,
        0,  242,  242,  242,  242,  242,  242,  242,  242,  242,

      242,  242,  242,  242,    0,    0,    0,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  242,  242,  244,  244,  244,  244,

      244,  244,  244,  244,  244,  244,    0,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  246,  246,    0,    0,
        0,    0,    0,    0,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,    0,    0,    0,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,

      246,  246,  246,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  246,  246,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,    0,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,

      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  262,
      262,    0,    0,    0,    0,    0,    0,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
        0,    0,    0,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      262,  262,  266,  266,    0,    0,    0,    0,    0,    0,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,    0,    0,    0,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  266,  266,  285,  285,    0,    0,    0,
        0,    0,    0,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,    0,    0,    0,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,

      285,  285,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  285,  285,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,    0,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,

      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  289,  289,
        0,    0,    0,    0,    0,    0,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,    0,
        0,    0,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  289,
      289,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,    0,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,

      291,  309,  309,    0,    0,    0,    0,    0,    0,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,    0,    0,    0,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  309,  309,  434,  434,  434,  435,  435,  435,
      436,  436,  437,  437,  437,  438,  438,  438,  440,  440,
      440,  441,  441,  441,  442,  442,  442,  444,  444,  445,
      445,  445,  446,  446,  446,  447,  447,  447,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[82] =
    {   0,
0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
    0, 0,     };

extern int rules_flex_debug;
int rules_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up rulestext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *rulestext;
#line 1 "ruleslex.ll"
#line 2 "ruleslex.ll"
/* **************************************************
 *
 * ELVEX
 *
 * Copyright 2019 LABRI, 
 * CNRS (UMR 5800), the University of Bordeaux,
 * and the Bordeaux INP
 *
 * Author: 
 * Lionel Clément
 * LaBRI -- Université Bordeaux 
 * 351, cours de la Libération
 * 33405 Talence Cedex - France
 * lionel.clement@labri.fr
 * 
 * This file is part of ELVEX.
 *
 ************************************************** */

#include <iostream>
#include <sstream>
#include <string>
#include <bitset>
#include <vector>
#include <list>
#include "ipointer.hh"
#include "vartable.hh"
#include "synthesizer.hh"
#include "rulesyacc.hh"
#include "messages.hh"

#if false
#define DBUG(x)x
#else
#define DBUG(x)
#endif

#define DBUGPRT(x) DBUG(cerr << "*** " << x << "<BR>" << std::endl;);
#define DBUGPRTARG(x,s) DBUG(cerr << "*** " << x << "&nbsp;" << s << "<BR>" << std::endl);
  
  extern char *lexString;
  extern bool stringInput;
  extern Synthesizer synthesizer;
  
  std::string *str;
  int comments;

  void init_buffer(){
    ruleslineno = 1;
  }
  
  void push_buffer() {
    rulespush_buffer_state(rules_create_buffer(rulesin,YY_BUF_SIZE ));
 }

  void delete_buffer() {
    rules_delete_buffer(YY_CURRENT_BUFFER);
  }
  
  void scan_string(std::string str) {
    rules_scan_string(str.c_str());
  }



#line 1554 "ruleslex.cc"

#define INITIAL 0
#define INCLUDE 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int ruleslex_destroy (void );

int rulesget_debug (void );

void rulesset_debug (int debug_flag  );

YY_EXTRA_TYPE rulesget_extra (void );

void rulesset_extra (YY_EXTRA_TYPE user_defined  );

FILE *rulesget_in (void );

void rulesset_in  (FILE * in_str  );

FILE *rulesget_out (void );

void rulesset_out  (FILE * out_str  );

yy_size_t rulesget_leng (void );

char *rulesget_text (void );

int rulesget_lineno (void );

void rulesset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int ruleswrap (void );
#else
extern int ruleswrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( rulestext, rulesleng, 1, rulesout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( rulesin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( rulesin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, rulesin))==0 && ferror(rulesin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(rulesin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int ruleslex (void);

#define YY_DECL int ruleslex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after rulestext and rulesleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( rulesleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(rulestext[rulesleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 91 "ruleslex.ll"


#line 1742 "ruleslex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)rulesalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in ruleslex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! rulesin )
			rulesin = stdin;

		if ( ! rulesout )
			rulesout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			rulesensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				rules_create_buffer(rulesin,YY_BUF_SIZE );
		}

		rules_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of rulestext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 434 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3349 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < rulesleng; ++yyl )
				if ( rulestext[yyl] == '\n' )
					   
    ruleslineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up rulestext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up rulestext again */
YY_RULE_SETUP
#line 93 "ruleslex.ll"
{
  DBUGPRTARG("••••••••••••••• ", rulestext);
  REJECT;
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 98 "ruleslex.ll"
{
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 101 "ruleslex.ll"
{comments=0; BEGIN COMMENT;}
	YY_BREAK

case 4:
YY_RULE_SETUP
#line 103 "ruleslex.ll"
{comments++;}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 104 "ruleslex.ll"
{}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 105 "ruleslex.ll"
{if (!(comments--)) BEGIN INITIAL;} 
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 106 "ruleslex.ll"
;
	YY_BREAK

case 8:
YY_RULE_SETUP
#line 109 "ruleslex.ll"
{BEGIN INCLUDE;}
	YY_BREAK

case 9:
YY_RULE_SETUP
#line 111 "ruleslex.ll"
{}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 112 "ruleslex.ll"
{
	  DBUGPRT("TOKEN_#INCLUDE\n");
	  synthesizer.pushBufferName(rulestext);
	  synthesizer.pushLineno(ruleslineno);
	  ruleslineno=1;
	  rulesin = fopen( rulestext, "r" );
	  if ( ! rulesin ){
	    std::cerr << "*** error -" << rulestext << "- not found" << std::endl;
	    exit(1);
	  }
	  push_buffer();
	  BEGIN(INITIAL);
	}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 125 "ruleslex.ll"
{}
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(INCLUDE):
case YY_STATE_EOF(COMMENT):
#line 128 "ruleslex.ll"
{
    rulespop_buffer_state();
    if ( !YY_CURRENT_BUFFER ) {
      yyterminate();
    }
    else {
      synthesizer.popBufferName();
      ruleslineno = synthesizer.popLineno();
    }
}
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 140 "ruleslex.ll"
{
    DBUGPRT("TOKEN_RIGHTARROW\n");
    return TOKEN_RIGHTARROW;
  }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 145 "ruleslex.ll"
{
    DBUGPRT("TOKEN_UPARROW\n");
    return TOKEN_UPARROW;
  }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 150 "ruleslex.ll"
{
    DBUGPRT("TOKEN_UP2ARROW\n");
    return TOKEN_UP2ARROW;
  }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 155 "ruleslex.ll"
{
    DBUGPRT("TOKEN_DOWNARROW\n");
    ruleslval.integer_slot = 1;
    return TOKEN_DOWNARROW;
  }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 161 "ruleslex.ll"
{
    DBUGPRT("TOKEN_DOWN2ARROW\n");
    return TOKEN_DOWN2ARROW;
  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 166 "ruleslex.ll"
{
    DBUGPRT("TOKEN_LT\n");
    return TOKEN_LT;
  }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 171 "ruleslex.ll"
{
    DBUGPRT("TOKEN_GT\n");
    return TOKEN_GT;
  }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 176 "ruleslex.ll"
{
    DBUGPRT("TOKEN_LE\n");
    return TOKEN_LT;
  }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 181 "ruleslex.ll"
{
    DBUGPRT("TOKEN_GE\n");
    return TOKEN_GE;
  }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 186 "ruleslex.ll"
{
    DBUGPRT("TOKEN_LPAR\n");
    return TOKEN_LPAR;
  }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 191 "ruleslex.ll"
{
    DBUGPRT("TOKEN_RPAR\n");
    return TOKEN_RPAR;
  }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 196 "ruleslex.ll"
{
    DBUGPRT("TOKEN_LBRACKET\n");
    return TOKEN_LBRACKET;
  }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 201 "ruleslex.ll"
{
    DBUGPRT("TOKEN_RBRACKET\n");
    return TOKEN_RBRACKET;
  }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 206 "ruleslex.ll"
{
    DBUGPRT("TOKEN_LBRACE\n");
    return TOKEN_LBRACE;
  }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 211 "ruleslex.ll"
{
    DBUGPRT("TOKEN_RBRACE\n");
    return TOKEN_RBRACE;
  }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 216 "ruleslex.ll"
{
    DBUGPRT("TOKEN_SEMI\n");
    return TOKEN_SEMI;
  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 221 "ruleslex.ll"
{
    DBUGPRT("TOKEN_DOT\n");
    return TOKEN_DOT;
  }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 226 "ruleslex.ll"
{
    DBUGPRT("TOKEN_COLON2\n");
    return TOKEN_COLON2;
  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 231 "ruleslex.ll"
{
    DBUGPRT("TOKEN_COLON\n");
    return TOKEN_COLON;
  }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 236 "ruleslex.ll"
{
    DBUGPRT("TOKEN_DASH");
    return TOKEN_DASH;
  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 241 "ruleslex.ll"
{
    DBUGPRT("TOKEN_UNION\n");
    return TOKEN_UNION;
  }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 246 "ruleslex.ll"
{
    DBUGPRT("TOKEN_SUBSUME\n");
    return TOKEN_SUBSUME;
  }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 251 "ruleslex.ll"
{
    DBUGPRT("TOKEN_EQUAL\n");
    return TOKEN_EQUAL;
  }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 256 "ruleslex.ll"
{
    DBUGPRT("TOKEN_AFF\n");
    return TOKEN_AFF;
  }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 261 "ruleslex.ll"
{
    DBUGPRT("TOKEN_DIFF\n");
    return TOKEN_DIFF;
  }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 266 "ruleslex.ll"
{
    DBUGPRT("TOKEN_PLUS\n");
    return TOKEN_PLUS;
  }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 271 "ruleslex.ll"
{
    DBUGPRT("TOKEN_MINUS\n");
    return TOKEN_MINUS;
  }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 276 "ruleslex.ll"
{
    DBUGPRT("TOKEN_TIMES\n");
    return TOKEN_TIMES;
  }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 281 "ruleslex.ll"
{
    DBUGPRT("TOKEN_DIVIDE\n");
    return TOKEN_DIVIDE;
  }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 286 "ruleslex.ll"
{
    DBUGPRT("TOKEN_INPUT\n");
    return TOKEN_INPUT;
  }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 291 "ruleslex.ll"
{
    DBUGPRT("TOKEN_GRAMMAR\n");
    return TOKEN_GRAMMAR;
  }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 296 "ruleslex.ll"
{
    DBUGPRT("TOKEN_LEXICON\n");
    return TOKEN_LEXICON;
  }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 301 "ruleslex.ll"
{
    DBUGPRT("TOKEN_IF\n");
    return TOKEN_IF;
  }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 306 "ruleslex.ll"
{
    DBUGPRT("TOKEN_ELSE\n");
    return TOKEN_ELSE;
  }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 311 "ruleslex.ll"
{
    DBUGPRT("TOKEN_ATTEST\n");
    return TOKEN_ATTEST;
  }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 316 "ruleslex.ll"
{
    DBUGPRT("TOKEN_PRINT\n");
    return TOKEN_PRINT;
  }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 321 "ruleslex.ll"
{
    DBUGPRT("TOKEN_PRINTLN\n");
    return TOKEN_PRINTLN;
  }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 326 "ruleslex.ll"
{
    DBUGPRT("TOKEN_SORT\n");
    return TOKEN_SORT;
  }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 331 "ruleslex.ll"
{
    DBUGPRT("TOKEN_REVERSE\n");
    return TOKEN_REVERSE;
  }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 336 "ruleslex.ll"
{
    DBUGPRT("TOKEN_RAND\n");
    return TOKEN_RAND;
  }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 341 "ruleslex.ll"
{
    DBUGPRT("TOKEN_WITH\n");
    return TOKEN_WITH;
  }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 346 "ruleslex.ll"
{
    DBUGPRT("TOKEN_COMBINATION\n");
    return TOKEN_COMBINATION;
  }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 351 "ruleslex.ll"
{
    DBUGPRT("TOKEN_PIPE\n");
    return TOKEN_PIPE;
  }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 356 "ruleslex.ll"
{
    DBUGPRT("TOKEN_OR\n");
    return TOKEN_OR;
  }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 361 "ruleslex.ll"
{
    DBUGPRT("TOKEN_AND\n");
    return TOKEN_AND;
  }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 366 "ruleslex.ll"
{
    DBUGPRT("TOKEN_IMPLICATION\n");
    return TOKEN_IMPLICATION;
  }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 371 "ruleslex.ll"
{
    DBUGPRT("TOKEN_EQUIV\n");
    return TOKEN_EQUIV;
  }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 376 "ruleslex.ll"
{
    DBUGPRT("TOKEN_NOT\n");
    return TOKEN_NOT;
  }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 381 "ruleslex.ll"
{
    DBUGPRT("TOKEN_INSET\n");
    return TOKEN_INSET;
  }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 388 "ruleslex.ll"
{
    DBUGPRT("TOKEN_COMMA\n");
    return TOKEN_COMMA;
  }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 393 "ruleslex.ll"
{
    DBUGPRT("TOKEN_DASH\n");
    return TOKEN_DASH;
  }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 398 "ruleslex.ll"
{
    DBUGPRT("TOKEN_PLUS\n");
    return TOKEN_PLUS;
  }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 403 "ruleslex.ll"
{
    DBUGPRT("TOKEN_MINUS\n");
    return TOKEN_MINUS;
  }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 408 "ruleslex.ll"
{
    DBUGPRT("TOKEN_MODULO\n");
    return TOKEN_MODULO;
  }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 413 "ruleslex.ll"
{
    DBUGPRT("TOKEN_PRED\n");
    return TOKEN_PRED;
  }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 418 "ruleslex.ll"
{
    DBUGPRT("TOKEN_FORM\n");
    return TOKEN_FORM;
  }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 423 "ruleslex.ll"
{
    DBUGPRT("TOKEN_TRUE\n");
    return TOKEN_TRUE;
  }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 428 "ruleslex.ll"
{
    DBUGPRT("TOKEN_NILL\n");
    return TOKEN_NIL;
  }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 433 "ruleslex.ll"
{
    DBUGPRTARG("TOKEN_INTEGER ", rulestext);
    ruleslval.integer_slot = ruleslineno;
    return TOKEN_INTEGER;
  }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 439 "ruleslex.ll"
{
    DBUGPRTARG("TOKEN_STRING ", rulestext);
    ruleslval.string_slot = new std::string(synthesizer.getTopBufferName());
    return TOKEN_STRING;
  }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 445 "ruleslex.ll"
{
    DBUGPRTARG("TOKEN_IDENTIFIER ", rulestext);
    ruleslval.string_slot = new std::string(rulestext);
    return TOKEN_IDENTIFIER;
  }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 451 "ruleslex.ll"
{
    DBUGPRTARG("TOKEN_VARIABLE ", rulestext);
    ruleslval.string_slot = new std::string(rulestext);
    return TOKEN_VARIABLE;
  }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 457 "ruleslex.ll"
{
    DBUGPRTARG("TOKEN_ANONYMOUS ", rulestext);
    return TOKEN_ANONYMOUS;
  }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 462 "ruleslex.ll"
{
    DBUGPRTARG("TOKEN_INTEGER ", rulestext);
    sscanf(rulestext, "%d", &ruleslval.integer_slot);
    return TOKEN_INTEGER;
  }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 468 "ruleslex.ll"
{
    DBUGPRTARG("TOKEN_DOUBLE ", rulestext);
    sscanf(rulestext, "%lf", &ruleslval.double_slot);
    return TOKEN_DOUBLE;
  }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 474 "ruleslex.ll"
{
    DBUGPRTARG("TOKEN_STRING ", rulestext);
    std::string s = rulestext;
    ruleslval.string_slot = new std::string(s.substr(1, s.length()-2));
    return TOKEN_STRING;
  }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 481 "ruleslex.ll"
{}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 483 "ruleslex.ll"
{}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 485 "ruleslex.ll"
{
    DBUGPRTARG("OTHER TOKEN ", rulestext);
    return (*rulestext);
  }
	YY_BREAK

case 81:
YY_RULE_SETUP
#line 491 "ruleslex.ll"
ECHO;
	YY_BREAK
#line 2505 "ruleslex.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed rulesin at a new source and called
			 * ruleslex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = rulesin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( ruleswrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * rulestext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of ruleslex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			rulesrestart(rulesin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) rulesrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 434 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 434 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 433);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					rulesrestart(rulesin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( ruleswrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve rulestext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    ruleslineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void rulesrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        rulesensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            rules_create_buffer(rulesin,YY_BUF_SIZE );
	}

	rules_init_buffer(YY_CURRENT_BUFFER,input_file );
	rules_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void rules_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		rulespop_buffer_state();
	 *		rulespush_buffer_state(new_buffer);
     */
	rulesensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	rules_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (ruleswrap()) processing, but the only time this flag
	 * is looked at is after ruleswrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void rules_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	rulesin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE rules_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) rulesalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in rules_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) rulesalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in rules_create_buffer()" );

	b->yy_is_our_buffer = 1;

	rules_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with rules_create_buffer()
 * 
 */
    void rules_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		rulesfree((void *) b->yy_ch_buf  );

	rulesfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a rulesrestart() or at EOF.
 */
    static void rules_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	rules_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then rules_init_buffer was _probably_
     * called from rulesrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void rules_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		rules_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void rulespush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	rulesensure_buffer_stack();

	/* This block is copied from rules_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from rules_switch_to_buffer. */
	rules_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void rulespop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	rules_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		rules_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void rulesensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)rulesalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in rulesensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)rulesrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in rulesensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE rules_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) rulesalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in rules_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	rules_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to ruleslex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       rules_scan_bytes() instead.
 */
YY_BUFFER_STATE rules_scan_string (yyconst char * yystr )
{
    
	return rules_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to ruleslex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE rules_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) rulesalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in rules_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = rules_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in rules_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up rulestext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		rulestext[rulesleng] = (yy_hold_char); \
		(yy_c_buf_p) = rulestext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		rulesleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int rulesget_lineno  (void)
{
        
    return ruleslineno;
}

/** Get the input stream.
 * 
 */
FILE *rulesget_in  (void)
{
        return rulesin;
}

/** Get the output stream.
 * 
 */
FILE *rulesget_out  (void)
{
        return rulesout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t rulesget_leng  (void)
{
        return rulesleng;
}

/** Get the current token.
 * 
 */

char *rulesget_text  (void)
{
        return rulestext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void rulesset_lineno (int  line_number )
{
    
    ruleslineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see rules_switch_to_buffer
 */
void rulesset_in (FILE *  in_str )
{
        rulesin = in_str ;
}

void rulesset_out (FILE *  out_str )
{
        rulesout = out_str ;
}

int rulesget_debug  (void)
{
        return rules_flex_debug;
}

void rulesset_debug (int  bdebug )
{
        rules_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from ruleslex_destroy(), so don't allocate here.
     */

    /* We do not touch ruleslineno unless the option is enabled. */
    ruleslineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    rulesin = stdin;
    rulesout = stdout;
#else
    rulesin = (FILE *) 0;
    rulesout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * ruleslex_init()
     */
    return 0;
}

/* ruleslex_destroy is for both reentrant and non-reentrant scanners. */
int ruleslex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		rules_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		rulespop_buffer_state();
	}

	/* Destroy the stack itself. */
	rulesfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    rulesfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * ruleslex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *rulesalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *rulesrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void rulesfree (void * ptr )
{
	free( (char *) ptr );	/* see rulesrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 491 "ruleslex.ll"




