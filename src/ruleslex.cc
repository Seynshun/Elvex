#line 2 "ruleslex.cc"

#line 4 "ruleslex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer rules_create_buffer
#define yy_delete_buffer rules_delete_buffer
#define yy_flex_debug rules_flex_debug
#define yy_init_buffer rules_init_buffer
#define yy_flush_buffer rules_flush_buffer
#define yy_load_buffer_state rules_load_buffer_state
#define yy_switch_to_buffer rules_switch_to_buffer
#define yyin rulesin
#define yyleng rulesleng
#define yylex ruleslex
#define yylineno ruleslineno
#define yyout rulesout
#define yyrestart rulesrestart
#define yytext rulestext
#define yywrap ruleswrap
#define yyalloc rulesalloc
#define yyrealloc rulesrealloc
#define yyfree rulesfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE rulesrestart(rulesin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t rulesleng;

extern FILE *rulesin, *rulesout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE ruleslex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-ruleslineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < rulesleng; ++yyl )\
                    if ( rulestext[yyl] == '\n' )\
                        --ruleslineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up rulestext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up rulestext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via rulesrestart()), so that the user can continue scanning by
	 * just pointing rulesin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when rulestext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t rulesleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow ruleswrap()'s to do buffer switches
 * instead of setting up a fresh rulesin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void rulesrestart (FILE *input_file  );
void rules_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE rules_create_buffer (FILE *file,int size  );
void rules_delete_buffer (YY_BUFFER_STATE b  );
void rules_flush_buffer (YY_BUFFER_STATE b  );
void rulespush_buffer_state (YY_BUFFER_STATE new_buffer  );
void rulespop_buffer_state (void );

static void rulesensure_buffer_stack (void );
static void rules_load_buffer_state (void );
static void rules_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER rules_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE rules_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE rules_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE rules_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *rulesalloc (yy_size_t  );
void *rulesrealloc (void *,yy_size_t  );
void rulesfree (void *  );

#define yy_new_buffer rules_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        rulesensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            rules_create_buffer(rulesin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        rulesensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            rules_create_buffer(rulesin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define ruleswrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *rulesin = (FILE *) 0, *rulesout = (FILE *) 0;

typedef int yy_state_type;

extern int ruleslineno;

int ruleslineno = 1;

extern char *rulestext;
#define yytext_ptr rulestext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up rulestext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	rulesleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 83
#define YY_END_OF_BUFFER 84
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[607] =
    {   0,
        9,    9,   84,   82,   83,   80,   82,   83,   81,   83,
       61,   82,   83,   82,   83,   31,   64,   82,   83,   82,
       83,   67,   82,   83,   82,   83,   21,   82,   83,   22,
       82,   83,   39,   82,   83,   37,   65,   82,   83,   63,
       82,   83,   38,   66,   82,   83,   28,   82,   83,   40,
       82,   83,   77,   78,   82,   83,   77,   78,   82,   83,
       30,   82,   83,   27,   82,   83,   17,   82,   83,   35,
       82,   83,   18,   82,   83,   82,   83,   74,   82,   83,
       74,   82,   83,   74,   82,   83,   74,   82,   83,   74,
       82,   83,   32,   74,   82,   83,   23,   82,   83,   24,

       82,   83,   76,   82,   83,   74,   82,   83,   74,   82,
       83,   74,   82,   83,   74,   82,   83,   74,   82,   83,
       74,   82,   83,   74,   82,   83,   74,   82,   83,   74,
       82,   83,   32,   74,   82,   83,   74,   82,   83,   25,
       82,   83,   56,   82,   83,   26,   82,   83,   82,   83,
       82,   83,   82,   83,   82,   83,   82,   83,   80,   82,
       83,   61,   82,   83,   82,   83,   31,   64,   82,   83,
       82,   83,   67,   82,   83,   82,   83,   21,   82,   83,
       22,   82,   83,   39,   82,   83,   37,   65,   82,   83,
       63,   82,   83,   38,   66,   82,   83,   28,   82,   83,

       40,   82,   83,   77,   78,   82,   83,   77,   78,   82,
       83,   30,   82,   83,   27,   82,   83,   17,   82,   83,
       35,   82,   83,   18,   82,   83,   82,   83,   74,   82,
       83,   74,   82,   83,   74,   82,   83,   74,   82,   83,
       74,   82,   83,   32,   74,   82,   83,   23,   82,   83,
       24,   82,   83,   76,   82,   83,   74,   82,   83,   74,
       82,   83,   74,   82,   83,   74,   82,   83,   74,   82,
       83,   74,   82,   83,   74,   82,   83,   74,   82,   83,
       74,   82,   83,   32,   74,   82,   83,   74,   82,   83,
       25,   82,   83,   56,   82,   83,   26,   82,   83,   82,

       83,   82,   83,   82,   83,   82,   83,   10,   83,    9,
       83,   11,   83,    7,   83,    5,   83,    7,   83,    7,
       83,   80,   36,   79,   75,   75,   58,   78,   78,   12,
        3,   77,   78,   29,   33,   19,   34,   59,   20,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   44,   74,   55,   74,   74,   74,   74,   74,
       74,   57,   61,   74,   74,    1,   80,   36,   79,   75,
       75,   58,   78,   78,   12,    3,   77,   78,   29,   33,
       19,   34,   59,   20,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   44,   74,   55,

       74,   74,   74,   74,   74,   74,   57,   61,   74,   74,
       10,    9,    6,    4,   79,   75,   75,   75,   75,   78,
        2,   78,   78,   78,   78,   60,   74,   71,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   13,   15,   14,   16,   62,   32,   19,   79,
       75,   75,   75,   75,   78,    1,    2,   78,   78,   78,
       78,   60,   74,   71,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   13,   15,
       14,   16,   62,   32,   19,   78,   78,   69,   74,   68,
       74,   70,   74,   74,   74,   74,   74,   45,   74,   74,

       74,   51,   74,   74,   49,   74,   52,   74,   78,   78,
       69,   74,   68,   74,   70,   74,   74,   74,   74,   74,
       45,   74,   74,   74,   51,   74,   74,   49,   74,   52,
       74,   74,   74,   74,   74,   74,   47,   74,   74,   74,
       74,   74,   74,   74,   47,   74,   74,   41,   74,   74,
       46,   74,   74,   74,   74,   74,   41,   74,   74,   46,
       74,   74,   74,   74,   74,   74,   74,   74,   54,   74,
       48,   74,   50,   74,   74,   74,   74,   54,   74,   48,
       74,   50,   74,   42,   43,   73,   74,   72,   74,   74,
        8,   42,   43,   73,   74,   72,   74,   74,   74,   74,

       74,   74,   53,   74,   53,   74
    } ;

static yyconst flex_int16_t yy_accept[451] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    4,    6,    9,
       11,   14,   16,   20,   22,   25,   27,   30,   33,   36,
       40,   43,   47,   50,   53,   57,   61,   64,   67,   70,
       73,   76,   78,   81,   84,   87,   90,   93,   97,  100,
      103,  106,  109,  112,  115,  118,  121,  124,  127,  130,
      133,  137,  140,  143,  146,  149,  151,  153,  155,  157,
      159,  162,  165,  167,  171,  173,  176,  178,  181,  184,
      187,  191,  194,  198,  201,  204,  208,  212,  215,  218,
      221,  224,  227,  229,  232,  235,  238,  241,  244,  248,
      251,  254,  257,  260,  263,  266,  269,  272,  275,  278,

      281,  284,  288,  291,  294,  297,  300,  302,  304,  306,
      308,  310,  312,  314,  316,  318,  320,  322,  323,  324,
      324,  325,  325,  326,  326,  327,  327,  327,  328,  329,
      330,  331,  332,  332,  332,  332,  334,  335,  336,  337,
      338,  339,  340,  340,  340,  340,  341,  342,  342,  342,
      343,  344,  345,  346,  347,  348,  349,  349,  349,  350,
      351,  352,  353,  355,  357,  358,  359,  360,  361,  362,
      363,  364,  365,  366,  366,  366,  366,  366,  366,  366,
      367,  368,  369,  369,  370,  370,  370,  371,  371,  372,
      372,  372,  373,  374,  375,  376,  377,  377,  377,  377,

      379,  380,  381,  382,  383,  384,  385,  385,  385,  385,
      386,  387,  387,  387,  388,  389,  390,  391,  392,  393,
      394,  394,  394,  395,  396,  397,  398,  400,  402,  403,
      404,  405,  406,  407,  408,  409,  410,  411,  411,  411,
      411,  411,  411,  412,  413,  414,  415,  416,  417,  418,
      418,  418,  419,  420,  420,  420,  421,  421,  422,  423,
      424,  424,  425,  426,  427,  427,  427,  427,  428,  430,
      431,  432,  433,  434,  435,  436,  437,  438,  439,  440,
      441,  442,  443,  444,  445,  446,  447,  448,  449,  450,
      451,  451,  452,  453,  453,  453,  454,  455,  455,  455,

      456,  456,  458,  459,  460,  460,  461,  462,  463,  463,
      463,  463,  464,  466,  467,  468,  469,  470,  471,  472,
      473,  474,  475,  476,  477,  478,  479,  480,  481,  482,
      483,  484,  485,  486,  487,  488,  488,  488,  488,  490,
      492,  494,  495,  496,  497,  498,  500,  501,  502,  504,
      505,  507,  509,  509,  510,  511,  511,  511,  511,  513,
      515,  517,  518,  519,  520,  521,  523,  524,  525,  527,
      528,  530,  532,  532,  532,  532,  533,  534,  535,  536,
      537,  539,  540,  540,  540,  540,  540,  541,  542,  543,
      544,  545,  547,  548,  548,  549,  549,  550,  551,  553,

      554,  555,  556,  557,  557,  557,  558,  558,  559,  560,
      562,  563,  564,  565,  566,  566,  566,  567,  568,  569,
      571,  573,  575,  575,  575,  575,  576,  577,  578,  580,
      582,  584,  585,  586,  588,  590,  591,  592,  593,  594,
      596,  598,  599,  600,  601,  602,  603,  605,  607,  607
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,    1,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,    1,   26,   27,   27,   27,   28,   29,   30,
       27,   27,   31,   27,   27,   32,   33,   34,   35,   36,
       27,   37,   27,   38,   39,   27,   27,   27,   27,   27,
       40,   41,   42,    1,   43,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   53,   53,   54,   55,   56,
       57,   58,   53,   59,   60,   61,   62,   63,   64,   65,
       53,   53,   66,   67,   68,    1,    1,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
       82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
        1,   92,   93,   94,   95,   96,   97,    1,   98,   99,
      100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
      110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
      120,  121,    1,  122,  123,  124,  125,  126,  127,    1,
      128,    1,    1,  129,  130,    1,  131,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,  132,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[133] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[464] =
    {   0,
        0,  132,  263,  265,  266,  267, 1237, 3349,  269, 3349,
     1212,  266, 3349,  281, 3349, 1225, 3349, 3349, 3349,  255,
     3349,  257, 3349,  265,  273,  274, 1213, 3349,  263,  264,
     1209,  245,  394, 1197, 1200, 1193, 1192,    0, 3349, 3349,
      507, 1167,    0, 1170, 1149, 1145,  249, 1142,  248, 1130,
        0, 1134, 3349, 1118, 3349, 1073,  570, 1061,  272, 1179,
      350,  352,  353,  320,  696, 1127,  354, 1116, 1115, 1114,
      355, 1113,  358, 1112,  366,  368,  370,  359, 1111,  378,
      367,  362,  365,  809, 1078, 1081, 1074, 1073,    0, 1106,
     1105,  922, 1046,    0, 1049, 1051, 1047,  311, 1044,  256,

     1045,    0, 1049, 1097,  393, 1096,  298, 1051,  278,  390,
        0, 1096, 3349, 3349, 3349, 1079, 1083,  401, 3349,  357,
     3349,  429, 1161, 1274,    0, 1337,  973, 3349,  444,  455,
     3349, 3349, 1091,  387,  462,  460, 3349, 3349, 1068, 3349,
     3349, 3349, 1033, 1035, 1042,    0,    0, 1397,  967, 1051,
     1055, 1057, 1046, 1507,    0,  378, 1570,  962, 1022, 1027,
     1021, 1021,    0,    0, 1027, 1022, 1014, 1017, 1014, 3349,
     3349,    0,    0,  376,  399,  406,  391, 1003, 1070, 3349,
      494, 1069,  508, 1068,  570,  518, 1680, 1793,    0, 1922,
      379, 1067,  499,  572, 1066, 1065, 1064,  490,  503,  576,

     1063, 1062,  363, 1061, 1060, 1059,  526,  527,  529,    0,
        0, 1982,  468, 1024, 1028, 1030, 1019, 2092,    0,  404,
     2155,  488,  996, 1001,  995,  992,    0,    0,  998,  993,
      985,  988,  985, 1042, 1041,    0,    0,  528,  545,  697,
      401,  515,    0, 1041, 3349, 3349,  572, 2265,    0, 2328,
      920, 2438,    0, 2501,  919,  580, 1037, 3349,  555,  588,
      561, 3349,  568, 3349,  995,  980,  972, 2611, 1003,  590,
      565, 2724, 1004,  571,  668,  573,  579,  569,  602,  669,
      675,  670, 3349, 3349, 3349, 3349, 3349, 3349, 3349,  759,
      717, 2837,    0, 2900,  504, 3010,    0, 3073,  701,  761,

     1031, 3349,  763,  764,  766, 1030,  768, 1029,  735,  712,
      517,  998,    0, 1002, 1000, 3183,  997,  979,  981,  977,
      976,  967,  975,  973,  959,  968, 1015, 1014, 1013, 1012,
     1011, 1010, 1009,  753,  610,  956,  948,  957,  975,  974,
      973,  674,  676,  735,  685,  972,  678,  744,  971,  743,
      970,  969,  795,  872,  788,  796,  713,  827,    0,    0,
        0,  765,  678,  941,  948,    0,  955,  937,    0,  938,
        0,    0,  941,  934,  948,  784,  785,  756,  777,  785,
      843,  761,  816,  822,  819,  847,  803,  852,  932,  936,
      945,  936,  929,  919, 3349,  891,  851,  853,  914,  791,

      852,  853,  854,  885,  886,  943,  887,  864,  867,    0,
      899,  887,  880,  883,  870,  872,  868,  869,  872,  894,
      893,  892,  914,  905,  932,  873,  875,  863,    0,    0,
        0, 3349, 3349,  892,  890,  882,  916,  911,  817,  688,
      683,  570,  880,  476,  889,  443,  387,    0, 3349, 3314,
     3317, 3320, 3322, 3325,  394, 3328, 3331, 3334,  305, 3337,
     3339, 3342, 3345
    } ;

static yyconst flex_int16_t yy_def[464] =
    {   0,
      449,  449,  450,  450,  451,  451,  449,  449,  449,  449,
      449,  452,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,   33,   33,   33,   33,   33,  449,  449,
      449,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,  449,  449,  449,  449,  449,  449,  449,  453,
      453,  453,  454,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,   65,   84,   84,   84,   84,   84,  453,
      453,   84,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,  453,  453,  453,  453,  453,  453,  453,
      455,  449,  449,  449,  449,  449,  449,  449,  449,  452,
      449,  452,  449,  449,  123,  449,  449,  449,  449,  449,
      449,  449,  456,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,   33,   33,  449,  449,   33,
       33,   33,   33,  449,  154,  154,  449,  449,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,  449,
      449,   33,   33,  449,  449,  449,  449,  449,  453,  449,
      453,  453,  457,  453,  457,  453,   84,   84,  187,  453,
      453,  453,  453,  453,  453,  453,  458,  453,  453,  453,

      453,  453,  453,  453,  453,  453,  453,  453,  453,   84,
       84,  190,  453,   84,   84,   84,   84,   84,  218,  218,
      190,  453,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,  453,  453,   84,   84,  453,  453,  453,
      453,  453,  459,  449,  449,  449,  460,  449,  248,  449,
      449,  449,  252,  449,  449,  449,  461,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  268,  268,
      268,  449,  272,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  449,  449,  449,  449,  449,  449,  449,  462,
      453,   84,  292,  190,  453,  292,  296,  190,  453,  453,

      463,  449,  453,  453,  453,  453,  453,  453,  453,  453,
      453,   84,   84,   84,   84,   84,  316,   84,   84,   84,
       84,   84,   84,   84,   84,   84,  453,  453,  453,  453,
      453,  453,  453,  449,  449,  449,  449,  449,  268,  268,
      268,  272,  272,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  453,  453,  453,  453,  453,  453,   84,   84,
       84,  316,  316,   84,   84,   84,   84,   84,   84,   84,
       84,   84,  449,  449,  449,  272,  272,  268,  268,  268,
      268,  268,  453,  453,  453,  453,  316,  316,   84,   84,
       84,   84,   84,  449,  449,  449,  272,  272,  268,  268,

      268,  268,  268,  453,  453,  453,  453,  316,  316,   84,
       84,   84,   84,   84,  449,  449,  272,  272,  268,  268,
      268,  268,  453,  453,  453,  316,  316,   84,   84,   84,
       84,  449,  449,  272,  272,  268,  453,  453,  453,  316,
      316,   84,  268,   84,  268,   84,  268,   84,    0,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449
    } ;

static yyconst flex_int16_t yy_nxt[3482] =
    {   0,
        8,    9,   10,    9,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   33,   33,   34,
       33,   33,   33,   35,   33,   36,   33,   37,   38,   39,
        8,   40,   41,   42,   43,   44,   43,   45,   46,   43,
       43,   47,   43,   43,   43,   43,   43,   48,   49,   50,
       43,   51,   43,   52,   43,   53,   54,   55,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,   56,   57,
       58,   59,   60,   61,   10,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   84,   84,
       84,   85,   84,   84,   84,   86,   84,   87,   84,   88,
       89,   90,   60,   91,   92,   93,   94,   95,   94,   96,
       97,   94,   94,   98,   94,   94,   94,   94,   94,   99,
      100,  101,   94,  102,   94,  103,   94,  104,  105,  106,

       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
      107,  108,  109,  110,  112,  113,  112,  113,  115,  115,
      118,  121,  118,  129,  130,  129,  130,  132,  116,  116,
      180,  131,  133,  117,  117,  138,  139,  140,  141,  134,
      134,  166,  136,  136,  143,  167,  144,  163,  145,  230,

      180,  135,  135,  231,  164,  243,  122,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      135,  135,  180,  124,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  174,  175,  176,  177,
      178,  181,  180,  181,  180,  180,  180,  180,  184,  227,
      180,  180,  121,  192,  180,  180,  228,  180,  180,  180,
      180,  186,  180,  193,  194,  182,  193,  194,  196,  201,
      180,  180,  195,  197,  198,  206,  198,  308,  200,  200,
      204,  205,  180,  185,  243,  180,  199,  122,  199,  236,

      202,  203,  118,  180,  118,  259,  260,  272,  235,  273,
      126,  127,  146,  146,  207,  199,  208,  199,  209,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  316,  247,  317,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  234,
      134,  283,  131,  284,  238,  239,  240,  241,  242,  122,
      180,  134,  135,  256,  256,  261,  134,  261,  136,  136,
      262,  263,  287,  135,  285,  141,  286,  264,  135,  119,
      180,  135,  180,  289,  142,  181,  180,  181,  448,  182,

      187,  180,  135,  333,  206,  180,  180,  135,  303,  304,
      180,  128,  170,  184,  288,  198,  305,  180,  305,  180,
      180,  306,  307,  148,  149,  154,  154,  199,  180,  180,
      180,  180,  446,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  199,  180,  185,  156,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  180,  291,  180,  290,  311,  121,  180,  262,
      263,  358,  310,  135,  309,  202,  335,  335,  198,  211,
      300,  300,  198,  341,  200,  200,  134,  147,  256,  256,

      199,  147,  135,  147,  199,  147,  334,  334,  135,  219,
      185,  147,  122,  327,  195,  328,  135,  340,  344,  199,
      346,  444,  147,  199,  348,  293,  347,  135,  335,  335,
      329,  205,  330,  308,  147,  135,  157,  158,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  349,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  180,  180,

      147,  147,  147,  180,  155,  376,  155,  147,  219,  377,
      147,  388,  345,  219,  180,  180,  350,  147,  219,  180,
      352,  380,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  351,  379,  180,  188,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  180,  353,  180,  184,  180,  180,  147,  180,  357,
      180,  334,  334,  331,  385,  147,  147,  198,  356,  300,
      300,  135,  354,  354,  306,  307,  355,  355,  147,  199,
      180,  199,  199,  147,  378,  219,  387,  180,  180,  185,

      135,  382,  192,  234,  381,  332,  355,  355,  199,  147,
      199,  199,  397,  398,  155,  155,  399,  147,  180,  180,
      403,  180,  297,  147,  180,  190,  191,  210,  210,  180,
      401,  408,  400,  219,  419,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  383,  180,
      384,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  180,  147,  405,  404,  386,  406,
      409,  155,  219,  155,  147,  147,  147,  180,  180,  180,
      354,  354,  407,  417,  219,  418,  402,  219,  155,  155,

      199,  422,  420,  219,  147,  219,  426,  180,  421,  427,
      434,  435,  147,  180,  147,  440,  180,  441,  180,  199,
      155,  147,  155,  442,  147,  147,  147,  433,  432,  424,
      431,  423,  436,  443,  180,  430,  445,  429,  212,  213,
      218,  218,  428,  425,  447,  180,  147,  416,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  437,  415,  438,  220,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  439,  414,  413,
      412,  411,  410,  396,  395,  394,  393,  392,  391,  390,

      389,  147,  147,  147,  147,  147,  147,  147,  375,  374,
      373,  180,  180,  180,  180,  180,  180,  180,  372,  371,
      370,  369,  368,  367,  366,  365,  364,  363,  361,  360,
      359,  180,  180,  302,  343,  147,  338,  337,  336,  258,
      253,  249,  244,  180,  180,  326,  325,  324,  323,  322,
      321,  221,  222,  180,  320,  319,  318,  315,  314,  313,
      312,  180,  180,  180,  180,  180,  302,  180,  180,  180,
      180,  180,  180,  138,  282,  281,  280,  279,  278,  277,
      276,  275,  274,  155,  271,  270,  269,  268,  147,  267,
      266,  265,  264,  258,  123,  246,  245,  244,  180,  180,

      233,  232,  229,  226,  225,  224,  223,  180,  180,  217,
      216,  215,  214,  180,  180,  180,  180,  180,  180,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  180,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  248,
      248,  180,  172,  171,  170,  169,  168,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,

      165,  162,  161,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  160,  159,  153,  152,
      151,  150,  142,  137,  128,  119,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      250,  251,  252,  252,  449,  449,  449,  449,  449,  449,

      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  449,  449,  449,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  254,  255,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  449,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  449,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  146,  146,  146,  146,  146,

      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  154,  154,  449,  449,  449,
      449,  449,  449,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  449,  449,  449,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  157,  158,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  449,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  292,  292,

      449,  449,  449,  449,  449,  449,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  449,
      449,  449,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  294,
      295,  296,  296,  449,  449,  449,  449,  449,  449,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  449,  449,  449,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  298,  299,  180,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,

      449,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      449,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,

      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      218,  218,  449,  449,  449,  449,  449,  449,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  449,  449,  449,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  221,  222,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  449,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  248,  248,  449,  449,  449,  449,  449,
      449,  249,  249,  249,  249,  249,  249,  249,  249,  249,

      249,  249,  249,  249,  449,  449,  449,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  250,  251,  249,  249,  249,  249,

      249,  249,  249,  249,  249,  249,  449,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  252,  252,  449,  449,
      449,  449,  449,  449,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  449,  449,  449,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,

      252,  252,  252,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  254,  255,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  449,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  252,

      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  146,
      146,  449,  449,  449,  449,  449,  449,  147,  147,  147,
      147,  147,  147,  339,  147,  147,  147,  147,  147,  147,
      449,  449,  449,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      148,  149,  154,  154,  449,  449,  449,  449,  449,  449,
      155,  155,  155,  155,  342,  155,  155,  155,  155,  155,
      155,  155,  155,  449,  449,  449,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  157,  158,  292,  292,  449,  449,  449,
      449,  449,  449,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  449,  449,  449,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,

      292,  292,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  294,  295,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  449,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  292,  292,

      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  296,  296,
      449,  449,  449,  449,  449,  449,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  449,
      449,  449,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  298,
      299,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  449,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,

      296,  218,  218,  449,  449,  449,  449,  449,  449,  219,
      219,  219,  219,  362,  219,  219,  219,  219,  219,  219,
      219,  219,  449,  449,  449,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  221,  222,  111,  111,  111,  114,  114,  114,
      120,  120,  179,  179,  179,  183,  183,  183,  257,  257,
      257,  183,  183,  183,  301,  301,  301,  120,  120,  257,
      257,  257,  183,  183,  183,  301,  301,  301,    7,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449
    } ;

static yyconst flex_int16_t yy_chk[3482] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    3,    3,    4,    4,    5,    6,
        9,   12,    9,   20,   20,   22,   22,   24,    5,    6,
      109,   22,   24,    5,    6,   29,   29,   30,   30,   25,
       26,   49,   26,   26,   32,   49,   32,   47,   32,  100,

      107,   25,   26,  100,   47,  459,   12,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       25,   26,   64,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   59,   59,   59,   59,
       59,   61,   61,   61,   62,   63,   67,   71,   63,   98,
       73,   78,  120,   67,   82,  203,   98,   83,   75,   81,
       76,   64,   77,   71,   71,   62,   73,   73,   75,   78,
       80,  191,   73,   75,   76,   82,   77,  203,   77,   77,
       81,   81,  110,   63,  455,  105,   76,  120,   77,  109,

       80,   80,  118,  241,  118,  134,  134,  156,  107,  156,
       14,   14,   33,   33,   83,   76,   83,   77,   83,  447,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,  220,  122,  220,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,  105,
      129,  174,  174,  174,  110,  110,  110,  110,  110,  122,
      213,  130,  129,  130,  130,  135,  136,  135,  136,  136,
      135,  135,  176,  130,  175,  175,  175,  175,  136,  177,
      222,  129,  198,  177,  177,  181,  181,  181,  446,  241,

      191,  193,  130,  241,  241,  199,  295,  136,  198,  198,
      183,  176,  176,  183,  176,  193,  199,  242,  199,  311,
      186,  199,  199,   33,   33,   41,   41,  193,  207,  208,
      238,  209,  444,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,  193,  239,  183,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,  185,  186,  194,  185,  209,  247,  200,  261,
      261,  311,  208,  259,  207,  242,  263,  263,  194,  213,
      194,  194,  200,  271,  200,  200,  256,  271,  256,  256,

      194,  278,  259,  274,  200,  276,  260,  260,  256,  222,
      185,  277,  247,  238,  238,  238,  260,  270,  274,  194,
      276,  442,  270,  200,  278,  295,  277,  256,  335,  335,
      239,  239,  239,  239,  279,  260,   41,   41,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  279,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   65,  240,

      275,  280,  282,  299,  342,  342,  343,  281,  363,  343,
      347,  363,  275,  441,  310,  357,  280,  345,  440,  291,
      282,  347,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,  281,  345,  309,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,  290,  291,  300,  290,  303,  304,  344,  305,  310,
      307,  334,  334,  240,  357,  350,  348,  300,  309,  300,
      300,  334,  304,  304,  305,  305,  307,  307,  378,  300,
      355,  303,  304,  382,  344,  362,  362,  353,  356,  290,

      334,  350,  240,  240,  348,  240,  355,  355,  300,  379,
      303,  304,  376,  377,  376,  377,  378,  380,  383,  439,
      382,  385,  299,  400,  384,   65,   65,   84,   84,  358,
      380,  387,  379,  387,  400,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,  353,  386,
      356,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,  354,  381,  384,  383,  358,  385,
      388,  397,  388,  398,  401,  402,  403,  404,  405,  407,
      354,  354,  386,  397,  408,  398,  381,  409,  417,  418,

      354,  403,  401,  426,  419,  427,  408,  424,  402,  409,
      417,  418,  443,  438,  436,  426,  423,  427,  437,  354,
      435,  445,  434,  428,  422,  421,  420,  416,  415,  405,
      414,  404,  419,  436,  425,  413,  443,  412,   84,   84,
       92,   92,  411,  407,  445,  406,  399,  396,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,  423,  394,  424,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,  425,  393,  392,
      391,  390,  389,  375,  374,  373,  370,  368,  367,  365,

      364,  352,  351,  349,  346,  341,  340,  339,  338,  337,
      336,  333,  332,  331,  330,  329,  328,  327,  326,  325,
      324,  323,  322,  321,  320,  319,  318,  317,  315,  314,
      312,  308,  306,  301,  273,  269,  267,  266,  265,  257,
      255,  251,  244,  235,  234,  233,  232,  231,  230,  229,
      226,   92,   92,  108,  225,  224,  223,  217,  216,  215,
      214,  206,  205,  204,  202,  201,  197,  196,  195,  192,
      184,  182,  179,  178,  169,  168,  167,  166,  165,  162,
      161,  160,  159,  158,  153,  152,  151,  150,  149,  145,
      144,  143,  139,  133,  127,  117,  116,  112,  106,  104,

      103,  101,   99,   97,   96,   95,   93,   91,   90,   88,
       87,   86,   85,   79,   74,   72,   70,   69,   68,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,   66,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  123,
      123,   60,   58,   56,   54,   52,   50,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,

       48,   46,   45,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,   44,   42,   37,   36,
       35,   34,   31,   27,   16,   11,    7,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      123,  123,  124,  124,    0,    0,    0,    0,    0,    0,

      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,    0,    0,    0,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  124,  124,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,    0,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,    0,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,

      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  154,  154,    0,    0,    0,
        0,    0,    0,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,    0,    0,    0,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  154,  154,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,    0,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  187,  187,

        0,    0,    0,    0,    0,    0,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,    0,
        0,    0,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  187,
      187,  188,  188,    0,    0,    0,    0,    0,    0,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,    0,    0,    0,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  188,  188,  190,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,

        0,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
        0,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,

      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      218,  218,    0,    0,    0,    0,    0,    0,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,    0,    0,    0,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  218,  218,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,    0,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  248,  248,    0,    0,    0,    0,    0,
        0,  248,  248,  248,  248,  248,  248,  248,  248,  248,

      248,  248,  248,  248,    0,    0,    0,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  248,  248,  250,  250,  250,  250,

      250,  250,  250,  250,  250,  250,    0,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  252,  252,    0,    0,
        0,    0,    0,    0,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,    0,    0,    0,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,

      252,  252,  252,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  252,  252,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,    0,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  268,
      268,    0,    0,    0,    0,    0,    0,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
        0,    0,    0,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      268,  268,  272,  272,    0,    0,    0,    0,    0,    0,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,    0,    0,    0,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  272,  272,  292,  292,    0,    0,    0,
        0,    0,    0,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,    0,    0,    0,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,

      292,  292,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  292,  292,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,    0,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,

      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  296,  296,
        0,    0,    0,    0,    0,    0,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,    0,
        0,    0,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  296,
      296,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,    0,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,

      298,  316,  316,    0,    0,    0,    0,    0,    0,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,    0,    0,    0,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  316,  316,  450,  450,  450,  451,  451,  451,
      452,  452,  453,  453,  453,  454,  454,  454,  456,  456,
      456,  457,  457,  457,  458,  458,  458,  460,  460,  461,
      461,  461,  462,  462,  462,  463,  463,  463,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[84] =
    {   0,
0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0,     };

extern int rules_flex_debug;
int rules_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up rulestext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *rulestext;
#line 1 "ruleslex.ll"
#line 2 "ruleslex.ll"
/* **************************************************
 *
 * ELVEX
 *
 * Copyright 2019 LABRI, 
 * CNRS (UMR 5800), the University of Bordeaux,
 * and the Bordeaux INP
 *
 * Author: 
 * Lionel Clément
 * LaBRI -- Université Bordeaux 
 * 351, cours de la Libération
 * 33405 Talence Cedex - France
 * lionel.clement@labri.fr
 * 
 * This file is part of ELVEX.
 *
 ************************************************** */

#include <iostream>
#include <sstream>
#include <string>
#include <bitset>
#include <vector>
#include <list>
#include "ipointer.hh"
#include "vartable.hh"
#include "synthesizer.hh"
#include "rulesyacc.hh"
#include "messages.hh"

#if false
#define DBUG(x)x
#else
#define DBUG(x)
#endif

#define DBUGPRT(x) DBUG(cerr << "*** " << x << "<BR>" << std::endl;);
#define DBUGPRTARG(x,s) DBUG(cerr << "*** " << x << "&nbsp;" << s << "<BR>" << std::endl);
  
  extern char *lexString;
  extern bool stringInput;
  extern Synthesizer synthesizer;
  
  std::string *str;
  int comments;

  void init_buffer(){
    ruleslineno = 1;
  }
  
  void push_buffer() {
    rulespush_buffer_state(rules_create_buffer(rulesin,YY_BUF_SIZE ));
 }

  void delete_buffer() {
    rules_delete_buffer(YY_CURRENT_BUFFER);
  }
  
  void scan_string(std::string str) {
    rules_scan_string(str.c_str());
  }



#line 1562 "ruleslex.cc"

#define INITIAL 0
#define INCLUDE 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int ruleslex_destroy (void );

int rulesget_debug (void );

void rulesset_debug (int debug_flag  );

YY_EXTRA_TYPE rulesget_extra (void );

void rulesset_extra (YY_EXTRA_TYPE user_defined  );

FILE *rulesget_in (void );

void rulesset_in  (FILE * in_str  );

FILE *rulesget_out (void );

void rulesset_out  (FILE * out_str  );

yy_size_t rulesget_leng (void );

char *rulesget_text (void );

int rulesget_lineno (void );

void rulesset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int ruleswrap (void );
#else
extern int ruleswrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( rulestext, rulesleng, 1, rulesout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( rulesin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( rulesin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, rulesin))==0 && ferror(rulesin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(rulesin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int ruleslex (void);

#define YY_DECL int ruleslex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after rulestext and rulesleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( rulesleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(rulestext[rulesleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 91 "ruleslex.ll"


#line 1750 "ruleslex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)rulesalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in ruleslex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! rulesin )
			rulesin = stdin;

		if ( ! rulesout )
			rulesout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			rulesensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				rules_create_buffer(rulesin,YY_BUF_SIZE );
		}

		rules_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of rulestext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 450 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3349 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < rulesleng; ++yyl )
				if ( rulestext[yyl] == '\n' )
					   
    ruleslineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up rulestext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up rulestext again */
YY_RULE_SETUP
#line 93 "ruleslex.ll"
{
  DBUGPRTARG("••••••••••••••• ", rulestext);
  REJECT;
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 98 "ruleslex.ll"
{
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 101 "ruleslex.ll"
{comments=0; BEGIN COMMENT;}
	YY_BREAK

case 4:
YY_RULE_SETUP
#line 103 "ruleslex.ll"
{comments++;}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 104 "ruleslex.ll"
{}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 105 "ruleslex.ll"
{if (!(comments--)) BEGIN INITIAL;} 
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 106 "ruleslex.ll"
;
	YY_BREAK

case 8:
YY_RULE_SETUP
#line 109 "ruleslex.ll"
{BEGIN INCLUDE;}
	YY_BREAK

case 9:
YY_RULE_SETUP
#line 111 "ruleslex.ll"
{}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 112 "ruleslex.ll"
{
	  DBUGPRT("TOKEN_#INCLUDE\n");
	  synthesizer.pushBufferName(rulestext);
	  synthesizer.pushLineno(ruleslineno);
	  ruleslineno=1;
	  rulesin = fopen( rulestext, "r" );
	  if ( ! rulesin ){
	    std::cerr << "*** error -" << rulestext << "- not found" << std::endl;
	    exit(1);
	  }
	  push_buffer();
	  BEGIN(INITIAL);
	}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 125 "ruleslex.ll"
{}
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(INCLUDE):
case YY_STATE_EOF(COMMENT):
#line 128 "ruleslex.ll"
{
    rulespop_buffer_state();
    if ( !YY_CURRENT_BUFFER ) {
      yyterminate();
    }
    else {
      synthesizer.popBufferName();
      ruleslineno = synthesizer.popLineno();
    }
}
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 140 "ruleslex.ll"
{
    DBUGPRT("TOKEN_RIGHTARROW\n");
    return TOKEN_RIGHTARROW;
  }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 145 "ruleslex.ll"
{
    DBUGPRT("TOKEN_UPARROW\n");
    return TOKEN_UPARROW;
  }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 150 "ruleslex.ll"
{
    DBUGPRT("TOKEN_UP2ARROW\n");
    return TOKEN_UP2ARROW;
  }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 155 "ruleslex.ll"
{
    DBUGPRT("TOKEN_DOWNARROW\n");
    ruleslval.integer_slot = 1;
    return TOKEN_DOWNARROW;
  }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 161 "ruleslex.ll"
{
    DBUGPRT("TOKEN_DOWN2ARROW\n");
    return TOKEN_DOWN2ARROW;
  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 166 "ruleslex.ll"
{
    DBUGPRT("TOKEN_LT\n");
    return TOKEN_LT;
  }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 171 "ruleslex.ll"
{
    DBUGPRT("TOKEN_GT\n");
    return TOKEN_GT;
  }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 176 "ruleslex.ll"
{
    DBUGPRT("TOKEN_LE\n");
    return TOKEN_LT;
  }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 181 "ruleslex.ll"
{
    DBUGPRT("TOKEN_GE\n");
    return TOKEN_GE;
  }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 186 "ruleslex.ll"
{
    DBUGPRT("TOKEN_LPAR\n");
    return TOKEN_LPAR;
  }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 191 "ruleslex.ll"
{
    DBUGPRT("TOKEN_RPAR\n");
    return TOKEN_RPAR;
  }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 196 "ruleslex.ll"
{
    DBUGPRT("TOKEN_LBRACKET\n");
    return TOKEN_LBRACKET;
  }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 201 "ruleslex.ll"
{
    DBUGPRT("TOKEN_RBRACKET\n");
    return TOKEN_RBRACKET;
  }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 206 "ruleslex.ll"
{
    DBUGPRT("TOKEN_LBRACE\n");
    return TOKEN_LBRACE;
  }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 211 "ruleslex.ll"
{
    DBUGPRT("TOKEN_RBRACE\n");
    return TOKEN_RBRACE;
  }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 216 "ruleslex.ll"
{
    DBUGPRT("TOKEN_SEMI\n");
    return TOKEN_SEMI;
  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 221 "ruleslex.ll"
{
    DBUGPRT("TOKEN_DOT\n");
    return TOKEN_DOT;
  }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 226 "ruleslex.ll"
{
    DBUGPRT("TOKEN_COLON2\n");
    return TOKEN_COLON2;
  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 231 "ruleslex.ll"
{
    DBUGPRT("TOKEN_COLON\n");
    return TOKEN_COLON;
  }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 236 "ruleslex.ll"
{
    DBUGPRT("TOKEN_DASH");
    return TOKEN_DASH;
  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 241 "ruleslex.ll"
{
    DBUGPRT("TOKEN_UNION\n");
    return TOKEN_UNION;
  }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 246 "ruleslex.ll"
{
    DBUGPRT("TOKEN_SUBSUME\n");
    return TOKEN_SUBSUME;
  }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 251 "ruleslex.ll"
{
    DBUGPRT("TOKEN_EQUAL\n");
    return TOKEN_EQUAL;
  }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 256 "ruleslex.ll"
{
    DBUGPRT("TOKEN_AFF\n");
    return TOKEN_AFF;
  }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 261 "ruleslex.ll"
{
    DBUGPRT("TOKEN_DIFF\n");
    return TOKEN_DIFF;
  }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 266 "ruleslex.ll"
{
    DBUGPRT("TOKEN_PLUS\n");
    return TOKEN_PLUS;
  }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 271 "ruleslex.ll"
{
    DBUGPRT("TOKEN_MINUS\n");
    return TOKEN_MINUS;
  }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 276 "ruleslex.ll"
{
    DBUGPRT("TOKEN_TIMES\n");
    return TOKEN_TIMES;
  }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 281 "ruleslex.ll"
{
    DBUGPRT("TOKEN_DIVIDE\n");
    return TOKEN_DIVIDE;
  }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 286 "ruleslex.ll"
{
    DBUGPRT("TOKEN_INPUT\n");
    return TOKEN_INPUT;
  }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 291 "ruleslex.ll"
{
    DBUGPRT("TOKEN_GRAMMAR\n");
    return TOKEN_GRAMMAR;
  }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 296 "ruleslex.ll"
{
    DBUGPRT("TOKEN_LEXICON\n");
    return TOKEN_LEXICON;
  }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 301 "ruleslex.ll"
{
    DBUGPRT("TOKEN_IF\n");
    return TOKEN_IF;
  }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 306 "ruleslex.ll"
{
    DBUGPRT("TOKEN_ELSE\n");
    return TOKEN_ELSE;
  }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 311 "ruleslex.ll"
{
    DBUGPRT("TOKEN_ATTEST\n");
    return TOKEN_ATTEST;
  }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 316 "ruleslex.ll"
{
    DBUGPRT("TOKEN_PRINT\n");
    return TOKEN_PRINT;
  }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 321 "ruleslex.ll"
{
    DBUGPRT("TOKEN_PRINTLN\n");
    return TOKEN_PRINTLN;
  }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 326 "ruleslex.ll"
{
    DBUGPRT("TOKEN_SORT\n");
    return TOKEN_SORT;
  }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 331 "ruleslex.ll"
{
    DBUGPRT("TOKEN_REVERSE\n");
    return TOKEN_REVERSE;
  }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 336 "ruleslex.ll"
{
    DBUGPRT("TOKEN_RAND\n");
    return TOKEN_RAND;
  }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 341 "ruleslex.ll"
{
    DBUGPRT("TOKEN_WITH\n");
    return TOKEN_WITH;
  }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 346 "ruleslex.ll"
{
    DBUGPRT("TOKEN_COMBINATION\n");
    return TOKEN_COMBINATION;
  }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 351 "ruleslex.ll"
{
    DBUGPRT("TOKEN_FOREACH\n");
    return TOKEN_FOREACH;
  }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 356 "ruleslex.ll"
{
    DBUGPRT("TOKEN_IN\n");
    return TOKEN_IN;
  }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 361 "ruleslex.ll"
{
    DBUGPRT("TOKEN_PIPE\n");
    return TOKEN_PIPE;
  }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 366 "ruleslex.ll"
{
    DBUGPRT("TOKEN_OR\n");
    return TOKEN_OR;
  }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 371 "ruleslex.ll"
{
    DBUGPRT("TOKEN_AND\n");
    return TOKEN_AND;
  }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 376 "ruleslex.ll"
{
    DBUGPRT("TOKEN_IMPLICATION\n");
    return TOKEN_IMPLICATION;
  }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 381 "ruleslex.ll"
{
    DBUGPRT("TOKEN_EQUIV\n");
    return TOKEN_EQUIV;
  }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 386 "ruleslex.ll"
{
    DBUGPRT("TOKEN_NOT\n");
    return TOKEN_NOT;
  }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 391 "ruleslex.ll"
{
    DBUGPRT("TOKEN_INSET\n");
    return TOKEN_INSET;
  }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 398 "ruleslex.ll"
{
    DBUGPRT("TOKEN_COMMA\n");
    return TOKEN_COMMA;
  }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 403 "ruleslex.ll"
{
    DBUGPRT("TOKEN_DASH\n");
    return TOKEN_DASH;
  }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 408 "ruleslex.ll"
{
    DBUGPRT("TOKEN_PLUS\n");
    return TOKEN_PLUS;
  }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 413 "ruleslex.ll"
{
    DBUGPRT("TOKEN_MINUS\n");
    return TOKEN_MINUS;
  }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 418 "ruleslex.ll"
{
    DBUGPRT("TOKEN_MODULO\n");
    return TOKEN_MODULO;
  }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 423 "ruleslex.ll"
{
    DBUGPRT("TOKEN_PRED\n");
    return TOKEN_PRED;
  }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 428 "ruleslex.ll"
{
    DBUGPRT("TOKEN_FORM\n");
    return TOKEN_FORM;
  }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 433 "ruleslex.ll"
{
    DBUGPRT("TOKEN_TRUE\n");
    return TOKEN_TRUE;
  }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 438 "ruleslex.ll"
{
    DBUGPRT("TOKEN_NILL\n");
    return TOKEN_NIL;
  }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 443 "ruleslex.ll"
{
    DBUGPRTARG("TOKEN_INTEGER ", rulestext);
    ruleslval.integer_slot = ruleslineno;
    return TOKEN_INTEGER;
  }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 449 "ruleslex.ll"
{
    DBUGPRTARG("TOKEN_STRING ", rulestext);
    ruleslval.string_slot = new std::string(synthesizer.getTopBufferName());
    return TOKEN_STRING;
  }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 455 "ruleslex.ll"
{
    DBUGPRTARG("TOKEN_IDENTIFIER ", rulestext);
    ruleslval.string_slot = new std::string(rulestext);
    return TOKEN_IDENTIFIER;
  }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 461 "ruleslex.ll"
{
    DBUGPRTARG("TOKEN_VARIABLE ", rulestext);
    ruleslval.string_slot = new std::string(rulestext);
    return TOKEN_VARIABLE;
  }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 467 "ruleslex.ll"
{
    DBUGPRTARG("TOKEN_ANONYMOUS ", rulestext);
    return TOKEN_ANONYMOUS;
  }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 472 "ruleslex.ll"
{
    DBUGPRTARG("TOKEN_INTEGER ", rulestext);
    sscanf(rulestext, "%d", &ruleslval.integer_slot);
    return TOKEN_INTEGER;
  }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 478 "ruleslex.ll"
{
    DBUGPRTARG("TOKEN_DOUBLE ", rulestext);
    sscanf(rulestext, "%lf", &ruleslval.double_slot);
    return TOKEN_DOUBLE;
  }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 484 "ruleslex.ll"
{
    DBUGPRTARG("TOKEN_STRING ", rulestext);
    std::string s = rulestext;
    ruleslval.string_slot = new std::string(s.substr(1, s.length()-2));
    return TOKEN_STRING;
  }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 491 "ruleslex.ll"
{}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 493 "ruleslex.ll"
{}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 495 "ruleslex.ll"
{
    DBUGPRTARG("OTHER TOKEN ", rulestext);
    return (*rulestext);
  }
	YY_BREAK

case 83:
YY_RULE_SETUP
#line 501 "ruleslex.ll"
ECHO;
	YY_BREAK
#line 2529 "ruleslex.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed rulesin at a new source and called
			 * ruleslex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = rulesin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( ruleswrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * rulestext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of ruleslex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			rulesrestart(rulesin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) rulesrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 450 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 450 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 449);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					rulesrestart(rulesin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( ruleswrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve rulestext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    ruleslineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void rulesrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        rulesensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            rules_create_buffer(rulesin,YY_BUF_SIZE );
	}

	rules_init_buffer(YY_CURRENT_BUFFER,input_file );
	rules_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void rules_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		rulespop_buffer_state();
	 *		rulespush_buffer_state(new_buffer);
     */
	rulesensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	rules_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (ruleswrap()) processing, but the only time this flag
	 * is looked at is after ruleswrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void rules_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	rulesin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE rules_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) rulesalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in rules_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) rulesalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in rules_create_buffer()" );

	b->yy_is_our_buffer = 1;

	rules_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with rules_create_buffer()
 * 
 */
    void rules_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		rulesfree((void *) b->yy_ch_buf  );

	rulesfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a rulesrestart() or at EOF.
 */
    static void rules_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	rules_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then rules_init_buffer was _probably_
     * called from rulesrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void rules_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		rules_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void rulespush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	rulesensure_buffer_stack();

	/* This block is copied from rules_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from rules_switch_to_buffer. */
	rules_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void rulespop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	rules_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		rules_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void rulesensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)rulesalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in rulesensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)rulesrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in rulesensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE rules_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) rulesalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in rules_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	rules_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to ruleslex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       rules_scan_bytes() instead.
 */
YY_BUFFER_STATE rules_scan_string (yyconst char * yystr )
{
    
	return rules_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to ruleslex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE rules_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) rulesalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in rules_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = rules_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in rules_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up rulestext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		rulestext[rulesleng] = (yy_hold_char); \
		(yy_c_buf_p) = rulestext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		rulesleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int rulesget_lineno  (void)
{
        
    return ruleslineno;
}

/** Get the input stream.
 * 
 */
FILE *rulesget_in  (void)
{
        return rulesin;
}

/** Get the output stream.
 * 
 */
FILE *rulesget_out  (void)
{
        return rulesout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t rulesget_leng  (void)
{
        return rulesleng;
}

/** Get the current token.
 * 
 */

char *rulesget_text  (void)
{
        return rulestext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void rulesset_lineno (int  line_number )
{
    
    ruleslineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see rules_switch_to_buffer
 */
void rulesset_in (FILE *  in_str )
{
        rulesin = in_str ;
}

void rulesset_out (FILE *  out_str )
{
        rulesout = out_str ;
}

int rulesget_debug  (void)
{
        return rules_flex_debug;
}

void rulesset_debug (int  bdebug )
{
        rules_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from ruleslex_destroy(), so don't allocate here.
     */

    /* We do not touch ruleslineno unless the option is enabled. */
    ruleslineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    rulesin = stdin;
    rulesout = stdout;
#else
    rulesin = (FILE *) 0;
    rulesout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * ruleslex_init()
     */
    return 0;
}

/* ruleslex_destroy is for both reentrant and non-reentrant scanners. */
int ruleslex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		rules_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		rulespop_buffer_state();
	}

	/* Destroy the stack itself. */
	rulesfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    rulesfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * ruleslex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *rulesalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *rulesrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void rulesfree (void * ptr )
{
	free( (char *) ptr );	/* see rulesrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 501 "ruleslex.ll"




