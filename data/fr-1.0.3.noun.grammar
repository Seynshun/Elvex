
/* **************************************************
 * Groupe nominal
 ************************************************** */
NP → [det|detNum|detForm] N [form] {
  //print __FILE__; print " ("; print __LINE__; println ")";
  [sem:$sem, $Rest] ⊂ ↑;
  if (¬ $sem)
    $sem = default;
  [number:$number, def:$def, poss:$poss, dem:$dem, part:$part, personPoss:$personPoss, numberPoss:$numberPoss] ⊂ ↑;
  ↓2 = [sem:$sem, $Rest];
  if (#3) {
    [modForm:$ModForm];
    ↓3 = $ModForm;
  }
  else {
    [modForm:NIL];
  }
  if (#1:1) {
    [detNum:NIL, detForm:NIL];
    [qual:$qualSynth, part:$partSynth, number:$numberSynth, def:$defSynth, poss:$possSynth, dem:$demSynth, personPoss:$personPossSynth, numberPoss:$numberPossSynth, $restSynth] ⊂ ⇓2;
    if (¬ $qualSynth)
      $qual = no;
    if ((¬ $part) && (¬ $partSynth))
      $part = no;
    if ((¬ $number) && (¬ $numberSynth))
      $number = sg;
    if ((¬ $def) && (¬ $defSynth))
      $def = no;
    if ((¬ $poss) && (¬ $possSynth))
      $poss = no;
    if ((¬ $dem) && (¬ $demSynth))
      $dem = no;
    if ((¬ $personPoss) && (¬ $personPossSynth))
      $personPoss = three;
    if ((¬ $numberPoss) && (¬ $numberPossSynth))
      $numberPoss = sg;
    ↓1 = ↑ ∪ $restSynth ∪ [qual:$qual, part:$part, number:$number, def:$def, poss:$poss, dem:$dem, personPoss:$personPoss, numberPoss:$numberPoss];
    ⇑ = ↑ ∪ ⇓1 ∪ ⇓2 ∪ [person:three, det:yes];
  }
  else if (#1:2) {
    [detNum:$Num];
    ↓1 = $Num;
    ⇑ = ↑ ∪ ⇓2 ∪ [person:three, det:yes];
  }
  else if (#1:3) {
    [detForm:$Form];
    ↓1 = $Form;
    ⇑ = ↑ ∪ ⇓2 ∪ [person:three, det:yes];
  }
  else {
    [detNum:NIL, det:no];
    ⇑ = ⇓2 ∪ [person:three, det:no];
  }
}

NP → pn {
  //print __FILE__; print " ("; print __LINE__; println ")";
  //println ↑;
  ↓1 = ↑;
  ⇑ = ⇓1 ∪ [person:three, det:yes];
}

NP → pro {
  //print __FILE__; print " ("; print __LINE__; println ")";
  //println ↑;
  ↓1 = ↑;
  ⇑ = ⇓1;
}

// un gros fumeur
N → AP N {
  //print __FILE__; print " ("; print __LINE__; println ")";
  //println ↑;
  [lexFct:$fct, $Rest];
  ↓2 = [fct:$fct, $Rest];
  [mod:<$Head>, number:$N, gender:$G] ⊂ ⇓2;
  ↓1 = [number:$N, gender:$G, $Head];
  [pos:$Pos] ⊂ ⇓1;
  attest ($Pos) ∧ ($Pos == pre);
  ⇑ = ⇓2 ∪ [qual:yes];
}

// un travail important
N → N AP {
  //print __FILE__; print " ("; print __LINE__; println ")";
  //println ↑;
  [lexFct:$fct, $Rest];
  ↓1 = [fct:$fct, $Rest];
  [mod:<$Head>, number:$N, gender:$G] ⊂ ⇓1;
  ↓2 = [number:$N, gender:$G, $Head];
  [pos:$Pos] ⊂ ⇓2;
  attest ¬$Pos ∨ ($Pos == post);
  ⇑ = ⇓1;
}

// un joli chat
N → AP N {
  //print __FILE__; print " ("; print __LINE__; println ")";
  //println ↑;
  [mod:<$Head::$Tail>, $Rest];
  [number:$N, gender:$G] ⊂ ↑;
  ↓1 = [number:$N, gender:$G, $Head];
  [number:$N1, gender:$G1, pos:$Pos] ⊂ ⇓1;
  attest ($Pos) ∧ ($Pos == pre);
  ↓2 = [mod:$Tail, number:$N1, gender:$G1, $Rest];
  ⇑ = ⇓2 ∪ [qual:yes];
}

N → N AP {
  //print __FILE__; print " ("; print __LINE__; println ")";
  //println ↑;
  [mod:<$Head::$Tail>, $Rest];
  [number:$N, gender:$G] ⊂ ↑;
  ↓2 = [number:$N, gender:$G, $Head];
  [number:$N2, gender:$G2, pos:$Pos] ⊂ ⇓2;
  attest ¬$Pos ∨ ($Pos == post);
  ↓1 = [mod:$Tail,number:$N2, gender:$G2, $Rest];
  ⇑ = ⇓1;
}

N → N form {
  //print __FILE__; print " ("; print __LINE__; println ")";
  //println ↑;
  [mod:<$Head::$Tail>, $Rest];
  ↓2 = $Head;
  ↓1 = [$Rest, mod:$Tail];
  ⇑ = ⇓1;
}

N → N PP {
  //print __FILE__; print " ("; print __LINE__; println ")";
  //println ↑;
  [de_obj:$DeObj, mod:NIL, $Rest];
  [de_obj:[PRED:$P]] ⊂ ↑;
  attest $P ≠ _pro; 
  ↓1 = $Rest;
  ↓2 = [$DeObj, pcas:de];
  ⇑ = ⇓1;
}

N → N PP {
  //print __FILE__; print " ("; print __LINE__; println ")";
  //println ↑;
  [à_obj:ÀObj, mod:NIL, $Rest];
  [à_obj:[PRED:$P]] ⊂ ↑;
  attest $P ≠ _pro; 
  ↓1 = $Rest;
  ↓2 = [$ÀObj, pcas:à];
  ⇑ = ⇓1;
}
 
NP → form {
  //print __FILE__; print " ("; print __LINE__; println ")";
  //println ↑;
  ↓1 = ↑;
  ⇑ = ⇓1;
}

N → n {
  //print __FILE__; print " ("; print __LINE__; println ")";
  [mod:NIL, i:NIL];
  //[lexFct:$lexFct] ⊂ ↑;
  ↓1 = ↑;
  ⇑ = ⇓1;
}

AP → adv AP {
  //print __FILE__; print " ("; print __LINE__; println ")";
  //println ↑;
  [mod:<$Head::$Tail>, $Rest];
  ↓1 = $Head;
  ↓2 = [$Rest, mod:$Tail];
  ⇑ = ⇓2;
}

AP → adj {
  //print __FILE__; print " ("; print __LINE__; println ")";
  //println ↑;
  [subj:NIL, mod:NIL];
  ↓1 = ↑;
  ⇑ = ⇓1;
}

AP → REL {
  //print __FILE__; print " ("; print __LINE__; println ")";
  //println ↑;
  [mod:NIL];
  ↓1 = ↑;
  ⇑ = ⇓1;
}

AP → form {
  //print __FILE__; print " ("; print __LINE__; println ")";
  //println ↑;
  ↓1 = ↑;
  ⇑ = ⇓1;
}

ADJ → adj {
  //print __FILE__; print " ("; print __LINE__; println ")";
  //println ↑;
  ↓1 = ↑;
  ⇑ = ⇓1;
}

/*
  REL → prel T
  //print __FILE__; print " ("; print __LINE__; println ")";
  {
  ↓1 = [];
  ↓2 = ↑;
  ⇑ = ⇓2;
  }
*/

PP → prep NP {
   //print __FILE__; print " ("; print __LINE__; println ")";
  ↓1 = ↑;
  ↓2 = ↑;
  ⇑ = ⇓1 ∪ ⇓2;
}

